openapi: '3.1.0'
info:
  title: Lemmy client API
  description: (unofficial) OpenAPI spec for Lemmy client API.
  contact:
    url: https://github.com/shadone/Lemmy-OpenAPI-Spec
    email: denis@ddenis.info
  license:
    name: BSD 2-Clause
    identifier: BSD-2-Clause
  version: '0.19.2+1'

servers:
  - url: https://discuss.tchncs.de
  - url: https://lemmy-0-19-1.ddenis.info

tags:
  - name: Account
    description: Account management.
  - name: User
    description: Operations on users.
  - name: Post
    description: Operations on posts.
  - name: Community
    description: Operations on communities.
  - name: Comment
    description: Operations on comments.
  - name: Misc
    description: Miscellaneous operations.
  - name: Mod
    description: Moderator operations.
  - name: Admin
    description: Administrative operations.
  - name: Site
    description: Operations on Site.
  - name: Private Message
    description: Operations on Private Messages.
  - name: Image
    description: Operations on images.

paths:
  /api/v3/user:
    get:
      tags:
        - User
      summary: Get Person Details
      description: Fetch a person by their id.
      operationId: getPersonDetails
      security:
        - BearerAuth: []
        - {}
      parameters:
        - in: query
          name: person_id
          schema:
            $ref: '#/components/schemas/PersonID'
          example: 1234
        - in: query
          name: username
          schema:
            type: string
          examples:
            LocalUser:
              value: 'milan'
              summary: Person name that is local to this instance.
            RemoteUser:
              value: 'ruud@lemmy.world'
              summary: Fully qualified person name.
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/CommunityID'
        - $ref: '#/components/parameters/SavedOnly'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPersonDetailsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/mention:
    get:
      tags:
        - User
      summary: Get Person Mentions
      description: Get mentions for your user.
      operationId: getPersonMentions
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CommentSort'
        - $ref: '#/components/parameters/UnreadOnly'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPersonMentionsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/replies:
    get:
      tags:
        - User
      summary: Get Replies
      description: Get comment replies.
      operationId: getReplies
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CommentSort'
        - $ref: '#/components/parameters/UnreadOnly'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRepliesResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/ban:
    post:
      tags:
        - User
        - Admin
      summary: Ban Person
      description: Ban a person from your site.
      operationId: banPerson
      security:
        - AdminAuth: []
      requestBody:
        description: Ban Person
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BanPerson'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BanPersonResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/banned:
    get:
      tags:
        - User
      summary: Get Banned Persons
      description: Get a list of banned users
      operationId: getBannedPersons
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BannedPersonsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/block:
    post:
      tags:
        - User
      summary: Block Person
      description: Block a person
      operationId: blockPerson
      security:
        - BearerAuth: []
      requestBody:
        description: Block Person
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockPerson'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockPersonResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/get_captcha:
    get:
      tags:
        - User
      summary: Get Captcha
      description: Fetch a Captcha
      operationId: getCaptcha
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCaptchaResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/delete_account:
    post:
      tags:
        - User
      summary: Delete Account
      description: Delete your account.
      operationId: deleteAccount
      security:
        - BearerAuth: []
      requestBody:
        description: Delete Account
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAccount'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/password_reset:
    post:
      tags:
        - User
      summary: Password Reset
      description: Reset your password.
      operationId: passwordReset
      security:
        - BearerAuth: []
      requestBody:
        description: Password Reset
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/password_change:
    post:
      tags:
        - User
      summary: Password Change After Reset
      description: Change your password from an email / token based reset.
      operationId: passwordChangeAfterReset
      security:
        - BearerAuth: []
      requestBody:
        description: Password Change After Reset
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeAfterReset'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/mark_all_as_read:
    post:
      tags:
        - User
      summary: Mark All as Read
      description: Mark all replies as read.
      operationId: markAllAsRead
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRepliesResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /api/v3/user/save_user_settings:
    put:
      tags:
        - User
      summary: Save User Settings
      description: Save your user settings.
      operationId: saveUserSettings
      security:
        - BearerAuth: []
      requestBody:
        description: Save User Settings
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveUserSettings'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/change_password:
    put:
      tags:
        - User
      summary: Change Password
      description: Change your user password.
      operationId: changePassword
      security:
        - BearerAuth: []
      requestBody:
        description: Change Password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/report_count:
    get:
      tags:
        - User
      summary: Get Report Count
      description: Get counts for your reports.
      operationId: getReportCount
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CommunityID'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReportCountResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/unread_count:
    get:
      tags:
        - User
      summary: Get Unread Count
      description: Get your unread counts.
      operationId: getUnreadCount
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUnreadCountResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/verify_email:
    post:
      tags:
        - User
      summary: Verify Email
      description: Verify your email
      operationId: verifyEmail
      security:
        - BearerAuth: []
      requestBody:
        description: Verify Email
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/admin/add:
    post:
      tags:
        - Admin
      summary: Add Admin
      description: Add an admin to your site.
      operationId: addAdmin
      security:
        - AdminAuth: []
      requestBody:
        description: Add Admin
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAdmin'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddAdminResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/admin/registration_application/count:
    get:
      tags:
        - Admin
      summary: Get Unread Registration Application Count
      description: Get the unread registration applications count.
      operationId: getUnreadRegistrationApplicationCount
      security:
        - AdminAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUnreadRegistrationApplicationCountResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/admin/registration_application/list:
    get:
      tags:
        - Admin
      summary: List Registration Applications
      description: List the registration applications
      operationId: listRegistrationApplications
      security:
        - AdminAuth: []
      parameters:
        - $ref: '#/components/parameters/UnreadOnly'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRegistrationApplicationsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/admin/registration_application/approve:
    put:
      tags:
        - Admin
      summary: Approve Registration Application
      description: Approve a registration application.
      operationId: approveRegistrationApplication
      security:
        - AdminAuth: []
      requestBody:
        description: Approve Registration Application
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveRegistrationApplication'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationApplicationResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/admin/purge/person:
    post:
      tags:
        - Admin
      summary: Purge Person
      description: Purge / Delete a person from the database.
      operationId: purgePerson
      security:
        - AdminAuth: []
      requestBody:
        description: Purge Person
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurgePerson'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/admin/purge/community:
    post:
      tags:
        - Admin
      summary: Purge Community
      description: Purge / Delete a community from the database.
      operationId: purgeCommunity
      security:
        - AdminAuth: []
      requestBody:
        description: Purge Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurgeCommunity'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/admin/purge/post:
    post:
      tags:
        - Admin
      summary: Purge Post
      description: Purge / Delete a post from the database.
      operationId: purgePost
      security:
        - AdminAuth: []
      requestBody:
        description: Purge Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurgePost'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/admin/purge/comment:
    post:
      tags:
        - Admin
      summary: Purge Comment
      description: Purge / Delete a comment from the database.
      operationId: purgeComment
      security:
        - AdminAuth: []
      requestBody:
        description: Purge Comment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurgeComment'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/custom_emoji:
    post:
      tags:
        - Admin
      summary: Create Custom Emoji
      description: Create a new custom emoji
      operationId: createCustomEmoji
      security:
        - AdminAuth: []
      requestBody:
        description: Create Custom Emoji
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomEmoji'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEmojiResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    put:
      tags:
        - Admin
      summary: Edit Custom Emoji
      description: Edit a new custom emoji
      operationId: editCustomEmoji
      security:
        - AdminAuth: []
      requestBody:
        description: Edit Custom Emoji
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCustomEmoji'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEmojiResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/custom_emoji/delete:
    post:
      tags:
        - Admin
      summary: Delete Custom Emoji
      description: Delete a new custom emoji
      operationId: deleteCustomEmoji
      security:
        - AdminAuth: []
      requestBody:
        description: Delete Custom Emoji
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCustomEmoji'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/federated_instances:
    get:
      tags:
        - Misc
      summary: Get Federated Instances
      description: Fetch federated instances.
      operationId: getFederatedInstances
      security:
        - {}
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFederatedInstancesResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /api/v3/site/block:
    post:
      tags:
        - Misc
      summary: Block Instance
      description: Block an instance.
      operationId: blockInstance
      security:
        - BearerAuth: []
      requestBody:
        description: Block Instance
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockInstance'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockInstanceResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/mention/mark_as_read:
    post:
      tags:
        - User
      summary: Mark Person Mention as Read
      description: Mark a person mention as read
      operationId: markPersonMentionAsRead
      security:
        - BearerAuth: []
      requestBody:
        description: Mark Person Mention as Read
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkPersonMentionAsRead'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonMentionResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/leave_admin:
    post:
      tags:
        - Account
        - User
      summary: Leave Admin
      description: Leave the Site admins.
      operationId: leaveAdmin
      security:
        - AdminAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSiteResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/totp/generate:
    post:
      tags:
        - Account
        - User
      summary: Generate TOTP Secret
      description: |
        Generate a TOTP / two-factor secret.

        Afterwards you need to call `/user/totp/update` with a valid token to enable it.
      operationId: generateTotpSecret
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateTotpSecretResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/export_settings:
    get:
      tags:
        - Account
        - User
      summary: Export Settings
      description: Export a backup of your user settings, including your saved content, followed communities, and blocks.
      operationId: exportSettings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/import_settings:
    post:
      tags:
        - Account
        - User
      summary: Import Settings
      description: Import a backup of your user settings.
      operationId: importSettings
      security:
        - BearerAuth: []
      requestBody:
        description: Settings
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/list_logins:
    get:
      tags:
        - Account
        - User
      summary: List Logins
      description: List login tokens for your user.
      operationId: listLogins
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoginToken'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/validate_auth:
    get:
      tags:
        - Account
        - User
      summary: Validate Auth
      description: Returns an error message if your auth token is invalid
      operationId: validateAuth
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/totp/update:
    post:
      tags:
        - Account
        - User
      summary: Update TOTP
      description: |
        Enable / Disable TOTP / two-factor authentication.

        To enable, you need to first call `/user/totp/generate` and then pass a valid token to this.

        Disabling is only possible if 2FA was previously enabled. Again it is necessary to pass a valid token.
      operationId: updateTotp
      security:
        - BearerAuth: []
      requestBody:
        description: Update TOTP
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTotp'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTotpResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/modlog:
    get:
      tags:
        - Mod
      summary: Get Modlog
      description: Fetches the modlog
      operationId: getModlog
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: mod_person_id
          schema:
            $ref: '#/components/schemas/PersonID'
        - $ref: '#/components/parameters/CommunityID'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - in: query
          name: type_
          schema:
            $ref: '#/components/schemas/ModlogActionType'
        - in: query
          name: other_person_id
          schema:
            $ref: '#/components/schemas/PersonID'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModlogResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/search:
    get:
      tags:
        - Misc
      summary: Search
      description: Search through Lemmy
      operationId: search
      security:
        - BearerAuth: []
        - {}
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/CommunityID'
        - $ref: '#/components/parameters/CommunityName'
        - in: query
          name: creator_id
          schema:
            $ref: '#/components/schemas/PersonID'
        - in: query
          name: type_
          schema:
            $ref: '#/components/schemas/SearchType'
        - $ref: '#/components/parameters/Sort'
        - in: query
          name: listing_type
          schema:
            $ref: '#/components/schemas/ListingType'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/community:
    post:
      tags:
        - Community
      summary: Create Community
      description: Create a new community.
      operationId: createCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Create Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    get:
      tags:
        - Community
      summary: Get Community
      description: Get / fetch a community.
      operationId: getCommunity
      security:
        - BearerAuth: []
        - {}
      parameters:
        - in: query
          name: id
          description: The community identifier to fetch info.
          schema:
            $ref: '#/components/schemas/CommunityID'
          example: 1234
        - in: query
          name: name
          description: The community name to fetch info.
          schema:
            type: string
          examples:
            LocalCommunity:
              value: 'gnome'
              summary: Community name that is local to this instance.
            RemoteCommunity:
              value: 'worldnews@lemmy.world'
              summary: Fully qualified community name.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    put:
      tags:
        - Community
      summary: Edit Community
      description: Edit a community.
      operationId: editCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Edit Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/community/list:
    get:
      tags:
        - Community
      summary: List Communities
      description: List communities, with various filters.
      operationId: listCommunities
      security:
        - BearerAuth: []
        - {}
      parameters:
        - $ref: '#/components/parameters/Type_'
        - $ref: '#/components/parameters/Sort'
        - in: query
          name: show_nsfw
          schema:
            type: boolean
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCommunitiesResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/community/follow:
    post:
      tags:
        - Community
      summary: Follow Community
      description: Follow / subscribe to a community.
      operationId: followCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Follow Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/community/block:
    post:
      tags:
        - Community
      summary: Block Community
      description: Block a community.
      operationId: blockCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Block Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockCommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/community/delete:
    post:
      tags:
        - Community
      summary: Delete Community
      description: Delete a community.
      operationId: deleteCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Delete Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/community/hide:
    put:
      tags:
        - Community
        - Admin
      summary: Hide Community
      description: Hide a community from public / "All" view. Admins only.
      operationId: hideCommunity
      security:
        - AdminAuth: []
      requestBody:
        description: Hide Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HideCommunity'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/community/remove:
    post:
      tags:
        - Community
        - Mod
      summary: Remove Community
      description: A moderator remove for a community.
      operationId: removeCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Remove Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/community/transfer:
    post:
      tags:
        - Community
        - Mod
      summary: Transfer Community
      description: Transfer your community to an existing moderator.
      operationId: transferCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Transfer Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/community/ban_user:
    post:
      tags:
        - Community
        - Mod
      summary: Ban From Community
      description: Ban a user from a community.
      operationId: banUserFromCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Ban From Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BanFromCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BanFromCommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/community/mod:
    post:
      tags:
        - Community
        - Mod
      summary: Add Mod to Community
      description: Add a moderator to your community.
      operationId: addModToCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Add Mod To Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddModToCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddModToCommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/post:
    post:
      tags:
        - Post
      summary: Create Post
      description: Create a post.
      operationId: createPost
      security:
        - BearerAuth: []
      requestBody:
        description: Create Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePost'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    get:
      tags:
        - Post
      summary: Get Post
      description: Fetch a post by its id.
      operationId: getPost
      security:
        - BearerAuth: []
        - {}
      parameters:
        - in: query
          name: id
          schema:
            $ref: '#/components/schemas/PostID'
        - in: query
          name: comment_id
          description: The comment identifier to fetch.
          schema:
            $ref: '#/components/schemas/CommentID'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    put:
      tags:
        - Post
      summary: Edit Post
      description: Edit a post.
      operationId: editPost
      security:
        - BearerAuth: []
      requestBody:
        description: Edit Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditPost'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/post/delete:
    post:
      tags:
        - Post
      summary: Delete Post
      description: Delete a post.
      operationId: deletePost
      security:
        - BearerAuth: []
      requestBody:
        description: Delete Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePost'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/post/remove:
    post:
      tags:
        - Mod
      summary: Remove Post
      description: A moderator remove for a post.
      operationId: removePost
      security:
        - BearerAuth: []
      requestBody:
        description: Remove Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemovePost'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/post/mark_as_read:
    post:
      tags:
        - Post
      summary: Mark Post as Read
      description: Mark a post as read.
      operationId: markPostAsRead
      security:
        - BearerAuth: []
      requestBody:
        description: Mark Post as Read
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkPostAsRead'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/post/lock:
    post:
      tags:
        - Mod
      summary: Lock Post
      description: A moderator can lock a post (i.e. disable new comments).
      operationId: lockPost
      security:
        - BearerAuth: []
      requestBody:
        description: Mark Post as Read
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockPost'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/post/feature:
    post:
      tags:
        - Mod
      summary: Feature Post
      description: A moderator can feature a community post (i.e. stick it to the top of a community).
      operationId: featurePost
      security:
        - BearerAuth: []
      requestBody:
        description: Feature Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeaturePost'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/post/list:
    get:
      tags:
        - Post
      summary: Get Posts
      description: List posts with various filters.
      operationId: getPosts
      security:
        - BearerAuth: []
        - {}
      parameters:
        - $ref: '#/components/parameters/Type_'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/CommunityID'
        - $ref: '#/components/parameters/CommunityName'
        - $ref: '#/components/parameters/SavedOnly'
        - $ref: '#/components/parameters/LikedOnly'
        - $ref: '#/components/parameters/DislikedOnly'
        - in: query
          name: page_cursor
          schema:
            $ref: '#/components/schemas/PaginationCursor'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/post/like:
    post:
      tags:
        - Post
      summary: Like Post
      description: Like / vote on a post
      operationId: likePost
      security:
        - BearerAuth: []
      requestBody:
        description: Like Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostLike'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/post/like/list:
    get:
      tags:
        - Admin
      summary: List a post likes
      description: List a post likes. Admin-only.
      operationId: listPostLikes
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: post_id
          schema:
            $ref: '#/components/schemas/PostID'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPostLikesResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/post/save:
    put:
      tags:
        - Post
      summary: Save Post
      description: Save a post
      operationId: savePost
      security:
        - BearerAuth: []
      requestBody:
        description: Save Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavePost'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/post/report:
    put:
      tags:
        - Post
      summary: Report Post
      description: Report a post.
      operationId: reportPost
      security:
        - BearerAuth: []
      requestBody:
        description: Report Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostReport'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReportResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/post/report/resolve:
    put:
      tags:
        - Mod
      summary: Resolve Post Report
      description: Resolve a post report. Only a mod can do this.
      operationId: resolvePortReport
      security:
        - BearerAuth: []
      requestBody:
        description: Resolve Post Report
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolvePostReport'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReportResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/post/report/list:
    get:
      tags:
        - Mod
      summary: List Post Reports
      description: List post reports.
      operationId: listPortReports
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UnresolvedOnly'
        - $ref: '#/components/parameters/CommunityID'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPostReportsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/post/site_metadata:
    get:
      tags:
        - Post
      summary: Get Site Metadata
      description: Fetch metadata for any given site.
      operationId: getSiteMetadata
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: url
          schema:
            type: string
            format: uri
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSiteMetadataResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/comment:
    post:
      tags:
        - Comment
      summary: Create Comment
      description: Create a comment.
      operationId: createComment
      security:
        - BearerAuth: []
      requestBody:
        description: Create Comment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComment'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    put:
      tags:
        - Comment
      summary: Edit Comment
      description: Edit a comment.
      operationId: editComment
      security:
        - BearerAuth: []
      requestBody:
        description: Edit Comment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditComment'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    get:
      tags:
        - Comment
      summary: Get Comment
      description: Get / fetch comment.
      operationId: getComment
      security:
        - BearerAuth: []
        - {}
      parameters:
        - in: query
          name: id
          schema:
            $ref: '#/components/schemas/CommentID'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/comment/delete:
    post:
      tags:
        - Comment
      summary: Delete Comment
      description: Delete a comment.
      operationId: deleteComment
      security:
        - BearerAuth: []
      requestBody:
        description: Delete Comment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteComment'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/comment/remove:
    post:
      tags:
        - Mod
      summary: Remove Comment
      description: A moderator remove for a comment.
      operationId: removeComment
      security:
        - BearerAuth: []
      requestBody:
        description: Remove Comment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveComment'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/comment/mark_as_read:
    post:
      tags:
        - Comment
      summary: Mark Comment as Read
      description: Mark a comment as read.
      operationId: markCommentReplyAsRead
      security:
        - BearerAuth: []
      requestBody:
        description: Mark Comment as Read
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkCommentReplyAsRead'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentReplyResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/comment/like:
    post:
      tags:
        - Comment
      summary: Like Comment
      description: Like / vote on a comment.
      operationId: likeComment
      security:
        - BearerAuth: []
      requestBody:
        description: Like Comment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentLike'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/comment/like/list:
    get:
      tags:
        - Admin
      summary: List a comment likes
      description: List a comment likes. Admin-only.
      operationId: listCommentLikes
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: comment_id
          schema:
            $ref: '#/components/schemas/CommentID'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCommentLikesResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/comment/save:
    put:
      tags:
        - Comment
      summary: Save Comment
      description: Save a comment.
      operationId: saveComment
      security:
        - BearerAuth: []
      requestBody:
        description: Save Comment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveComment'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/comment/distinguish:
    post:
      tags:
        - Mod
      summary: Distinguish Comment
      description: Distinguishes a comment (speak as moderator)
      operationId: distinguishComment
      security:
        - BearerAuth: []
      requestBody:
        description: Distinguish Comment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DistinguishComment'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/comment/list:
    get:
      tags:
        - Comment
      summary: Get Comments
      description: Get / fetch comments.
      operationId: getComments
      security:
        - BearerAuth: []
        - {}
      parameters:
        - $ref: '#/components/parameters/Type_'
        - $ref: '#/components/parameters/CommentSort'
        - in: query
          name: max_depth
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/CommunityID'
        - $ref: '#/components/parameters/CommunityName'
        - in: query
          name: post_id
          description: The post identifier to fetch comments from.
          schema:
            $ref: '#/components/schemas/PostID'
        - in: query
          name: parent_id
          schema:
            $ref: '#/components/schemas/CommentID'
        - $ref: '#/components/parameters/SavedOnly'
        - $ref: '#/components/parameters/LikedOnly'
        - $ref: '#/components/parameters/DislikedOnly'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/comment/report:
    post:
      tags:
        - Comment
      summary: Report Comment
      description: Report a comment.
      operationId: reportComment
      security:
        - BearerAuth: []
      requestBody:
        description: Report Comment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentReport'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentReportResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    put:
      tags:
        - Mod
      summary: Resolve Comment Report
      description: Resolve a comment report. Only a mod can do this.
      operationId: resolveCommentReport
      security:
        - BearerAuth: []
      requestBody:
        description: Resolve Comment Report
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolveCommentReport'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentReportResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/comment/report/list:
    get:
      tags:
        - Mod
      summary: List Comment Reports
      description: List comment reports.
      operationId: listCommentReports
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UnresolvedOnly'
        - $ref: '#/components/parameters/CommunityID'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCommentReportsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/private_message/list:
    get:
      tags:
        - Private Message
      summary: Get Private Messages
      description: Get / fetch private messages
      operationId: getPrivateMessages
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UnreadOnly'
        - in: query
          name: creator_id
          schema:
            $ref: '#/components/schemas/PersonID'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateMessagesResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/private_message:
    post:
      tags:
        - Private Message
      summary: Create Private Message
      description: Create a private message.
      operationId: createPrivateMessage
      security:
        - BearerAuth: []
      requestBody:
        description: Create Private Message
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrivateMessage'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateMessageResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    put:
      tags:
        - Private Message
      summary: Edit Private Message
      description: Edit a private message.
      operationId: editPrivateMessage
      security:
        - BearerAuth: []
      requestBody:
        description: Edit Private Message
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditPrivateMessage'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateMessageResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/private_message/delete:
    post:
      tags:
        - Private Message
      summary: Delete Private Message
      description: Delete a private message.
      operationId: deletePrivateMessage
      security:
        - BearerAuth: []
      requestBody:
        description: Delete Private Message
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePrivateMessage'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateMessageResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/private_message/mark_as_read:
    post:
      tags:
        - Private Message
      summary: Mark Private Message as Read
      description: Mark a private message as read.
      operationId: markPrivateMessageAsRead
      security:
        - BearerAuth: []
      requestBody:
        description: Mark Private Message as Read
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkPrivateMessageAsRead'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateMessageResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/private_message/report:
    post:
      tags:
        - Private Message
      summary: Report Private Message
      description: Create a report for a private message.
      operationId: reportPrivateMessage
      security:
        - BearerAuth: []
      requestBody:
        description: Report Private Message
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrivateMessageReport'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateMessageReportResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/private_message/report/resolve:
    put:
      tags:
        - Mod
      summary: Resolve Private Message Report
      description: Resolve a report for a private message
      operationId: resolvePrivateMessageReport
      security:
        - BearerAuth: []
      requestBody:
        description: Resolve Private Message Report
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolvePrivateMessageReport'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateMessageReportResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/private_message/report/list:
    get:
      tags:
        - Mod
      summary: List Private Message Reports
      description: List private message reports
      operationId: listPrivateMessageReports
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UnresolvedOnly'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrivateMessageReportsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/register:
    post:
      tags:
        - Account
      summary: Register
      description: Register a new user.
      operationId: register
      security:
        - BearerAuth: []
      requestBody:
        description: Register
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/login:
    post:
      tags:
        - Account
        - User
      summary: Login
      description: Login with a user account.
      operationId: login
      security:
        - {}
      requestBody:
        description: User credential
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/user/logout:
    post:
      tags:
        - Account
        - User
      summary: Logout
      description: Logout from a user account.
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/site:
    get:
      tags:
        - Site
      summary: Get Site
      description: Gets the site, and your user data.
      operationId: getSite
      security:
        - BearerAuth: []
        - {}
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSiteResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    post:
      tags:
        - Site
        - Admin
      summary: Create Site
      description: Create your site
      operationId: createSite
      security:
        - AdminAuth: []
      requestBody:
        description: Create Site
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSite'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    put:
      tags:
        - Site
        - Admin
      summary: Edit Site
      description: Edit your site
      operationId: editSite
      security:
        - AdminAuth: []
      requestBody:
        description: Edit Site
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditSite'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/v3/resolve_object:
    get:
      tags:
        - Misc
      summary: Resolve Object
      description: |
        Resolves an ActivityPub object.

        If user is authenticated, remote lookups are allowed, else only allows local search.
      operationId: resolveObject
      security:
        - BearerAuth: []
        - {}
      parameters:
        - in: query
          name: q
          description: Search query.
          required: true
          schema:
            type: string
          examples:
            LemmyUserSyntax:
              value: '@ruud@lemmy.world'
              summary: Resolve user by Lemmy shorthand syntax.
            ActivityPubObject:
              value: 'https://lemmy.world/u/ruud'
              summary: Resolve an ActivityPub actor.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResolveObjectResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /pictrs/image:
    post:
      tags:
        - Image
      summary: Upload Image
      description: Upload an image to the server.
      operationId: uploadImage
      security:
        - BearerAuth: []
      requestBody:
        description: Upload Image
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                'images[]':
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUploadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '413':
          $ref: '#/components/responses/TooLargeErrorResponse'

  /pictrs/image/delete/{delete_token}/{filename}:
    get:
      tags:
        - Image
      summary: Delete Image
      description: Delete a pictrs image.
      operationId: deleteImage
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: delete_token
          schema:
            type: string
          required: true
          description: The delete token as a proof of ownership of the given file.
          example: '0eac5362-779f-4b35-827d-73dfb244c48e'
        - in: path
          name: filename
          schema:
            type: string
          required: true
          description: The name of the image to delete.
          example: 'lkWZDRvugm.jpg'
      responses:
        '204':
          description: Image deleted.
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PictrsErrorResponse'

  /pictrs/image/{filename}:
    get:
      tags:
        - Image
      summary: Fetch Image
      description: Get the image content.
      operationId: getImage
      security:
        - {}
      parameters:
        - in: path
          name: filename
          schema:
            type: string
          required: true
          description: The name of the image to fetch.
          example: 'lkWZDRvugm.jpg'
        - in: query
          name: format
          schema:
            type: string
            enum:
              - apng
              - avif
              - gif
              - jpg
              - jxl
              - png
              - webp
          description: |
            The desired image format.

            Note that while `avif` and `webp` will work for both animated & non-animated images,
            some formats like `apng` and `gif` are only used to serve animations while others like
            `jpg`, `jxl` and `png` are only used to serve still images.
          example: 'png'
        - in: query
          name: thumbnail
          schema:
            type: integer
            format: int32
            minimum: 1
          description: Fetch and image suitable to be used as a thumbnail of the image fitting inside an {int} by {int} square.
          example: 256
      responses:
        '200':
          description: Successful operation
          content:
            image/*:
              schema:
                type: string
                format: binary
        '404':
          description: The specified image was not found.

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer access token passed in Authorization header.
    AdminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: The user with the bearer token needs to be a site Administrator.

  responses:
    ErrorResponse:
      description: An error has occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    UnauthorizedResponse:
      description: An authorization error has occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedResponse'

    SuccessResponse:
      description: Successful operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'

    PictrsErrorResponse:
      description: Error from pictrs service.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PictrsErrorResponse'

    TooLargeErrorResponse:
      description: Uploaded content is too large.

  parameters:
    Page:
      in: query
      name: page
      description: |
        Pagination. Page number.
        The page number to fetch the results. This allows to fetch large data sets one page at a time.
        The first page is number 1.
      schema:
        type: integer
        format: int64
    Limit:
      in: query
      name: limit
      description: |
        Pagination. Desired number of results per page.
        Specifies the maximum number of results per page.
        Note: This is server specific but in regular Lemmy install the default value is 10 and max is 50.
      schema:
        type: integer
        format: int64
    Type_:
      in: query
      name: type_
      description: |
        Specify the type of listing to fetch all elements.
        E.g. fetch all comments for Subscribed communities.
      schema:
        $ref: '#/components/schemas/ListingType'
    Sort:
      in: query
      name: sort
      description: Specifies how the elements in response should be ordered.
      schema:
        $ref: '#/components/schemas/SortType'
    CommentSort:
      in: query
      name: sort
      description: Specifies how the elements in response should be ordered.
      schema:
        $ref: '#/components/schemas/CommentSortType'
    SavedOnly:
      in: query
      name: saved_only
      description: Specifies whether to fetch only saved elements.
      schema:
        type: boolean
    LikedOnly:
      in: query
      name: liked_only
      description: Specifies whether to fetch only liked elements.
      schema:
        type: boolean
    DislikedOnly:
      in: query
      name: disliked_only
      description: Specifies whether to fetch only disliked elements.
      schema:
        type: boolean
    CommunityID:
      in: query
      name: community_id
      description: Specified the filter on the results to match the given community identifier.
      schema:
        $ref: '#/components/schemas/CommunityID'
      example: 1234
    CommunityName:
      in: query
      name: community_name
      description: Specified the filter on the results to match the given community name.
      schema:
        type: string
      examples:
        LocalCommunity:
          value: 'gnome'
          summary: Community name that is local to this instance.
        RemoteCommunity:
          value: 'worldnews@lemmy.world'
          summary: Fully qualified community name.
    UnreadOnly:
      in: query
      name: unread_only
      description: Specified the filter on the results to return only unread elements.
      schema:
        type: boolean
    UnresolvedOnly:
      in: query
      name: unresolved_only
      description: Specified the filter on the results to return only unresolved elements.
      schema:
        type: boolean

  schemas:
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
        message:
          type: string

    UnauthorizedResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          enum:
            - incorrect_login
        message:
          type: string

    SuccessResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean

    PictrsErrorResponse:
      type: object
      required:
        - msg
      properties:
        msg:
          type: string

    MyVote:
      type: integer
      format: int32 # int16
      minimum: -1
      maximum: 1
      description: |
        Users' vote status.

        Possible values:
          - 0: Neutral (not voted)
          - 1: Upvoted
          - -1: Downvoted

      example: 1

    PostID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int32
      summary: Post identifier
      description: The identifier is local to this instance.
      example: 1234

    CommentID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int32
      summary: Comment identifier
      description: The identifier is local to this instance.
      example: 1234

    PersonID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int32
      summary: Person identifier
      description: The identifier is local to this instance.
      example: 1234

    CommunityID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int32
      summary: Community identifier
      description: The identifier is local to this instance.
      example: 1234

    LanguageID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int32
      summary: Language identifier
      description: The identifier is local to this instance.
      example: 1234

    InstanceID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int32
      summary: Instance identifier
      description: The identifier is local to this instance.
      example: 1234

    PersonMentionID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int32
      summary: Person Mention identifier
      description: The identifier is local to this instance.
      example: 1234

    SiteID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int32
      summary: Site identifier
      description: The identifier is local to this instance.
      example: 1234

    LocalSiteID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int32
      summary: Local Site identifier
      description: The identifier is local to this instance.
      example: 1234

    LocalUserID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int32
      summary: Local User identifier
      description: The identifier is local to this instance.
      example: 1234

    CustomEmojiID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int32
      summary: Custom Emoji identifier
      description: The identifier is local to this instance.
      example: 1234

    PostReportID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int32
      summary: The post report id.
      description: The identifier is local to this instance.
      example: 1234

    CommentReplyID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int32
      summary: The comment reply id.
      description: The identifier is local to this instance.
      example: 1234

    CommentReportID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int32
      summary: The comment report id.
      description: The identifier is local to this instance.
      example: 1234

    PrivateMessageID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int32
      summary: The private message id.
      description: The identifer is local to this instance.
      example: 1234

    PrivateMessageReportID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int32
      summary: The private message report id.
      description: The identifer is local to this instance.
      example: 1234

    ActivityID:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
      type: integer
      format: int64
      summary: Activity id
      example: 1234

    LoginRequest:
      type: object
      required:
        - username_or_email
        - password
      properties:
        username_or_email:
          type: string
          example: 'foobar@example.org'
        password:
          type: string
          format: password
          example: 'mys3cur3p4$$w0rd'
        totp_2fa_token:
          type: string

    LoginResponse:
      type: object
      required:
        - registration_created
        - verify_email_sent
      properties:
        jwt:
          type: string
        registration_created:
          type: boolean
        verify_email_sent:
          type: boolean

    GetPostResponse:
      type: object
      required:
        - post_view
        - community_view
        - moderators
        - cross_posts
      properties:
        post_view:
          $ref: '#/components/schemas/PostView'
        community_view:
          $ref: '#/components/schemas/CommunityView'
        moderators:
          type: array
          items:
            $ref: '#/components/schemas/CommunityModeratorView'
        cross_posts:
          type: array
          items:
            $ref: '#/components/schemas/PostView'
          description: A list of cross-posts, or other times / communities this link has been posted to.

    PostView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      type: object
      required:
        - post
        - creator
        - community
        - creator_banned_from_community
        - creator_is_moderator
        - creator_is_admin
        - counts
        - subscribed
        - saved
        - read
        - creator_blocked
        - unread_comments
      properties:
        post:
          description: The post content.
          $ref: '#/components/schemas/Post'
        creator:
          description: Author of the post.
          $ref: '#/components/schemas/Person'
        community:
          description: Community to which the post was submitted.
          $ref: '#/components/schemas/Community'
        creator_banned_from_community:
          type: boolean
          description: Specifies whether the post author is banned from the community.
        creator_is_moderator:
          type: boolean
        creator_is_admin:
          type: boolean
        counts:
          description: Stats about the post.
          $ref: '#/components/schemas/PostAggregates'
        subscribed:
          $ref: '#/components/schemas/SubscribedType'
        saved:
          type: boolean
          description: Specifies whether the user marked the post as saved.
        read:
          type: boolean
          description: Specifies whether the user read the post.
        creator_blocked:
          type: boolean
          description: Specifies whether the user blocked the post author.
        my_vote:
          $ref: '#/components/schemas/MyVote'
        unread_comments:
          type: integer
          format: int64
          description: The number of unread comments in the post for the user.

    Post:
      type: object
      required:
        - id
        - name
        - creator_id
        - community_id
        - removed
        - locked
        - published
        - deleted
        - nsfw
        - ap_id
        - local
        - language_id
        - featured_community
        - featured_local
      properties:
        id:
          description: Post identifier
          $ref: '#/components/schemas/PostID'
        name:
          type: string
          description: The title of the post, in markdown.
        url:
          type: string
          format: uri
          description: An optional link / url for the post.
        body:
          type: string
          description: An optional post body, in markdown.
        creator_id:
          $ref: '#/components/schemas/PersonID'
          description: Post author identifier. The identifier is local to this instance.
        community_id:
          $ref: '#/components/schemas/CommunityID'
          description: Community identifier. The identifier is local to this instance.
        removed:
          type: boolean
          description: Whether the post is removed.
        locked:
          type: boolean
          description: Whether the post is locked.
        published:
          type: string
          format: date-time
          description: The date this post was published.
        updated:
          type: string
          format: date-time
          description: The date this post was last updated.
        deleted:
          type: boolean
          description: Whether the post is deleted.
        nsfw:
          type: boolean
          description: Whether the post is NSFW.
        embed_title:
          type: string
          description: A title for the link.
        embed_description:
          type: string
          description: A description for the link.
        thumbnail_url:
          type: string
          format: uri
          description: A thumbnail picture url.
        ap_id:
          type: string
          format: uri
          description: The federated activity id / ap_id.
          example: https://sh.itjust.works/post/109799
        local:
          type: boolean
          description: Whether the post is local.
        embed_video_url:
          type: string
          format: uri
          description: A video url for the link.
        language_id:
          $ref: '#/components/schemas/LanguageID'
          description: The language of the post.
        featured_community:
          type: boolean
          description: Whether the post is featured to its community.
        featured_local:
          type: boolean
          description: Whether the post is featured to its site.

    Community:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/community.rs
      type: object
      required:
        - id
        - name
        - title
        - removed
        - published
        - deleted
        - nsfw
        - actor_id
        - local
        - hidden
        - posting_restricted_to_mods
        - instance_id
      properties:
        id:
          description: Community identifier
          $ref: '#/components/schemas/CommunityID'
        name:
          type: string
          description: The unique name of the community.
          example: mylittlepony
        title:
          type: string
          description: A longer title, that can contain other characters, and doesn't have to be unique.
          example: 'MLP: Friendship is Magic Reddit Community'
        description:
          type: string
          description: A sidebar / markdown description.
        removed:
          type: boolean
          description: Whether the community is removed by a mod.
        published:
          type: string
          format: date-time
          description: The date community was created.
        updated:
          type: string
          format: date-time
          description: The date community info was last updated.
        deleted:
          type: boolean
          description: Whether the community has been deleted by its creator.
        nsfw:
          type: boolean
          description: Whether it is an NSFW community.
        actor_id:
          type: string
          format: uri
          description: The federated actor_id.
          example: https://lemmit.online/c/mylittlepony
        local:
          type: boolean
          description: Whether the community is local.
        icon:
          type: string
          format: uri
          description: A URL for an icon.
        banner:
          type: string
          format: uri
          description: A URL for a banner.
        hidden:
          type: boolean
          description: Whether the community is hidden.
        posting_restricted_to_mods:
          type: boolean
          description: Whether posting is restricted to mods only.
        instance_id:
          $ref: '#/components/schemas/InstanceID'

    Person:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/person.rs
      type: object
      required:
        - id
        - name
        - banned
        - published
        - actor_id
        - local
        - deleted
        - bot_account
      properties:
        id:
          description: Person identifier
          $ref: '#/components/schemas/PersonID'
        name:
          type: string
          description: Username (aka nickname aka short users' name).
          example: helloworld
        display_name:
          type: string
          description: A display name for the user.
          example: Hello World!
        avatar:
          type: string
          format: uri
          description: A URL for an avatar.
        banned:
          type: boolean
          description: Whether the person is banned.
        published:
          type: string
          format: date-time
          description: The account creation date.
        updated:
          type: string
          format: date-time
        actor_id:
          type: string
          format: uri
          description: The federated actor_id.
          example: https://discuss.tchncs.de/u/milan
        bio:
          type: string
          description: An optional bio, in markdown.
        local:
          type: boolean
          description: Whether the person is local to our site.
        banner:
          type: string
          format: uri
          description: A URL for a banner.
        deleted:
          type: boolean
          description: Whether the person is deleted.
        matrix_user_id:
          type: string
          description: A matrix id, usually given an @person:matrix.org
          example: '@person:matrix.org'
        bot_account:
          type: boolean
          description: Whether the person is a bot account.
        ban_expires:
          type: string
          format: date-time
          description: When their ban, if it exists, expires, if at all.
        instance_id:
          description: Which instance the person belongs to.
          $ref: '#/components/schemas/InstanceID'

    PostAggregates:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/aggregates/structs.rs
      type: object
      required:
        - post_id
        - comments
        - score
        - upvotes
        - downvotes
        - published
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        comments:
          type: integer
          format: int64
          description: Number of comments in the post.
        score:
          type: integer
          format: int64
          description: Overall score of the post.
        upvotes:
          type: integer
          format: int64
          description: Number of upvotes.
        downvotes:
          type: integer
          format: int64
          description: Number of downvotes.
        published:
          type: string
          format: date-time
          description: The timestamp when the post was published.

    SubscribedType:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      type: string
      description: A type / status for a community subscribe.
      enum:
        - Subscribed
        - NotSubscribed
        - Pending

    RegistrationMode:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      type: string
      enum:
        - Closed
        - RequireApplication
        - Open

    ModlogActionType:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      type: string
      description: A list of possible types for the various modlog actions.
      enum:
        - All
        - ModRemovePost
        - ModLockPost
        - ModFeaturePost
        - ModRemoveComment
        - ModRemoveCommunity
        - ModBanFromCommunity
        - ModAddCommunity
        - ModTransferCommunity
        - ModAdd
        - ModBan
        - ModHideCommunity
        - AdminPurgePerson
        - AdminPurgeCommunity
        - AdminPurgePost
        - AdminPurgeComment

    SearchType:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      type: string
      description: The type of content returned from a search.
      enum:
        - All
        - Comments
        - Posts
        - Communities
        - Users
        - Url

    PostFeatureType:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      type: string
      description: The feature type for a post
      enum:
        # Features to the top of your site.
        - Local
        # Features to the top of the community.
        - Community

    Language:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/language.rs
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/LanguageID'
        code:
          type: string
          description: |
            Language code.

            Two letter ISO639-1 language code.

            Or an additional value `und` for Undefined language.
          example: sv
        name:
          type: string
          description: Language name.
          example: Svenska

    CommunityView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_actor/src/structs.rs
      type: object
      required:
        - community
        - subscribed
        - blocked
        - counts
      properties:
        community:
          $ref: '#/components/schemas/Community'
        subscribed:
          $ref: '#/components/schemas/SubscribedType'
        blocked:
          type: boolean
        counts:
          $ref: '#/components/schemas/CommunityAggregates'

    CommunityAggregates:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/aggregates/structs.rs
      type: object
      required:
        - community_id
        - subscribers
        - posts
        - comments
        - published
        - users_active_day
        - users_active_week
        - users_active_month
        - users_active_half_year
      description: Aggregate data for a community.
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        subscribers:
          type: integer
          format: int64
        posts:
          type: integer
          format: int64
        comments:
          type: integer
          format: int64
        published:
          type: string
          format: date-time
        users_active_day:
          type: integer
          format: int64
          description: The number of users with any activity in the last day.
        users_active_week:
          type: integer
          format: int64
          description: The number of users with any activity in the last week.
        users_active_month:
          type: integer
          format: int64
          description: The number of users with any activity in the last month.
        users_active_half_year:
          type: integer
          format: int64
          description: The number of users with any activity in the last 6 months.

    CommunityModeratorView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_actor/src/structs.rs
      type: object
      required:
        - community
        - moderator
      description: A community moderator.
      properties:
        community:
          $ref: '#/components/schemas/Community'
        moderator:
          $ref: '#/components/schemas/Person'

    PaginationCursor:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      type: string

    ListingType:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      type: string
      enum:
        # Content from your own site, as well as all connected / federated sites.
        - All
        # Content from your site only.
        - Local
        # Content only from communities you've subscribed to.
        - Subscribed
        # Content that you can moderate (because you are a moderator of the community it is posted to).
        - ModeratorView

    SortType:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      type: string
      enum:
        - Active
        - Hot
        - New
        - Old
        - TopSixHour
        - TopTwelveHour
        - TopDay
        - TopWeek
        - TopMonth
        - TopYear
        - TopAll
        - MostComments
        - NewComments
        - TopThreeMonths
        - TopSixMonths
        - TopNineMonths
        - Controversial
        - Scaled

    CommentSortType:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      type: string
      enum:
        - Hot
        - Top
        - New
        - Old
        - Controversial

    PostListingMode:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      type: string
      enum:
        # A compact, list-type view.
        - List
        # A larger card-type view.
        - Card
        # A smaller card-type view, usually with images as thumbnails
        - SmallCard

    GetPostsResponse:
      type: object
      required:
        - posts
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostView'
        next_page:
          $ref: '#/components/schemas/PaginationCursor'

    GetCommentsResponse:
      type: object
      required:
        - comments
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentView'

    CommentView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      type: object
      required:
        - comment
        - creator
        - post
        - community
        - counts
        - creator_banned_from_community
        - creator_is_moderator
        - creator_is_admin
        - subscribed
        - saved
        - creator_blocked
      properties:
        comment:
          description: The comment content.
          $ref: '#/components/schemas/Comment'
        creator:
          description: Author of the comment.
          $ref: '#/components/schemas/Person'
        post:
          description: The post this comment belongs to.
          $ref: '#/components/schemas/Post'
        community:
          description: Community to which the comment was submitted.
          $ref: '#/components/schemas/Community'
        counts:
          description: Stats about the comment.
          $ref: '#/components/schemas/CommentAggregates'
        creator_banned_from_community:
          type: boolean
          description: Specifies whether the comment author is banned from the community.
        creator_is_moderator:
          type: boolean
        creator_is_admin:
          type: boolean
        subscribed:
          $ref: '#/components/schemas/SubscribedType'
        saved:
          type: boolean
          description: Specifies whether the user marked the comment as saved.
        creator_blocked:
          type: boolean
          description: Specifies whether the user blocked the comment author.
        my_vote:
          $ref: '#/components/schemas/MyVote'

    Comment:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/comment.rs
      type: object
      required:
        - id
        - creator_id
        - post_id
        - content
        - removed
        - published
        - deleted
        - ap_id
        - local
        - path
        - distinguished
        - language_id
      properties:
        id:
          description: Comment identifier. The identifier is local to this instance.
          $ref: '#/components/schemas/CommentID'
        creator_id:
          description: Comment author identifier.
          $ref: '#/components/schemas/PersonID'
        post_id:
          description: Post identifier that the comment belongs to.
          $ref: '#/components/schemas/PostID'
        content:
          type: string
          description: The content of the comment, in markdown.
        removed:
          type: boolean
          description: Whether the comment is removed.
        published:
          type: string
          format: date-time
          description: The date this comment was published.
        updated:
          type: string
          format: date-time
          description: The date this comment was last updated.
        deleted:
          type: boolean
          description: Whether the comment is deleted.
        ap_id:
          type: string
          format: uri
          description: The federated activity id / ap_id.
          example: https://lemmy.world/comment/316303
        local:
          type: boolean
          description: Whether the comment is local.
        path:
          type: string
          description: |
            Specifies the path to this comment in a tree of comments.
            Represented as dot separated list of comment identifiers. The path starts with "0" representing the root.
          example: '0.219355.219732.225923'
        distinguished:
          type: boolean
        language_id:
          description: The language of the post.
          $ref: '#/components/schemas/LanguageID'

    CommentAggregates:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/aggregates/structs.rs
      type: object
      required:
        - comment_id
        - score
        - upvotes
        - downvotes
        - published
        - child_count
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentID'
        score:
          type: integer
          format: int64
          description: Overall score of the comment.
        upvotes:
          type: integer
          format: int64
          description: Number of upvotes.
        downvotes:
          type: integer
          format: int64
          description: Number of downvotes.
        published:
          type: string
          format: date-time
          description: The timestamp when the comment was published.
        child_count:
          type: integer
          format: int32
          description: The total number of children in this comment branch.

    GetPersonDetailsResponse:
      type: object
      required:
        - person_view
        - comments
        - posts
        - moderates
      properties:
        person_view:
          $ref: '#/components/schemas/PersonView'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentView'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostView'
        moderates:
          type: array
          items:
            $ref: '#/components/schemas/CommunityModeratorView'

    PersonView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_actor/src/structs.rs
      type: object
      required:
        - person
        - counts
        - is_admin
      properties:
        person:
          $ref: '#/components/schemas/Person'
        counts:
          $ref: '#/components/schemas/PersonAggregates'
        is_admin:
          type: boolean
          description: Whether the person is an admin.

    PersonAggregates:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/aggregates/structs.rs
      type: object
      required:
        - person_id
        - post_count
        - comment_count
      properties:
        person_id:
          $ref: '#/components/schemas/PersonID'
        post_count:
          type: integer
          format: int64
        comment_count:
          type: integer
          format: int64

    GetPersonMentionsResponse:
      type: object
      required:
        - mentions
      properties:
        mentions:
          type: array
          items:
            $ref: '#/components/schemas/PersonMentionView'

    PersonMentionView:
      type: object
      required:
        - person_mention
        - comment
        - creator
        - post
        - community
        - recipient
        - counts
        - creator_banned_from_community
        - creator_is_moderator
        - creator_is_admin
        - subscribed
        - saved
        - creator_blocked
      properties:
        person_mention:
          $ref: '#/components/schemas/PersonMention'
        comment:
          $ref: '#/components/schemas/Comment'
        creator:
          $ref: '#/components/schemas/Person'
        post:
          $ref: '#/components/schemas/Post'
        community:
          $ref: '#/components/schemas/Community'
        recipient:
          $ref: '#/components/schemas/Person'
        counts:
          $ref: '#/components/schemas/CommentAggregates'
        creator_banned_from_community:
          type: boolean
        creator_is_moderator:
          type: boolean
        creator_is_admin:
          type: boolean
        subscribed:
          $ref: '#/components/schemas/SubscribedType'
        saved:
          type: boolean
        creator_blocked:
          type: boolean
        my_vote:
          $ref: '#/components/schemas/MyVote'

    PersonMention:
      type: object
      required:
        - id
        - recipient_id
        - comment_id
        - read
        - published
      properties:
        id:
          $ref: '#/components/schemas/PersonMentionID'
        recipient_id:
          $ref: '#/components/schemas/PersonID'
        comment_id:
          $ref: '#/components/schemas/CommentID'
        read:
          type: boolean
        published:
          type: string
          format: date-time

    GetSiteResponse:
      type: object
      required:
        - site_view
        - admins
        - version
        - all_languages
        - discussion_languages
      properties:
        site_view:
          $ref: '#/components/schemas/SiteView'
        admins:
          type: array
          items:
            $ref: '#/components/schemas/PersonView'
        version:
          type: string
        my_user:
          $ref: '#/components/schemas/MyUserInfo'
        all_languages:
          type: array
          items:
            $ref: '#/components/schemas/Language'
        discussion_languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageID'
        taglines:
          type: array
          items:
            $ref: '#/components/schemas/Tagline'
        custom_emojis:
          type: array
          items:
            $ref: '#/components/schemas/CustomEmojiView'

    SiteView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      type: object
      required:
        - site
        - local_site
        - local_site_rate_limit
        - counts
      properties:
        site:
          $ref: '#/components/schemas/Site'
        local_site:
          $ref: '#/components/schemas/LocalSite'
        local_site_rate_limit:
          $ref: '#/components/schemas/LocalSiteRateLimit'
        counts:
          $ref: '#/components/schemas/SiteAggregates'

    Site:
      type: object
      required:
        - id
        - name
        - published
        - actor_id
        - last_refreshed_at
        - inbox_url
        - public_key
        - instance_id
      properties:
        id:
          $ref: '#/components/schemas/SiteID'
        name:
          type: string
        sidebar:
          type: string
        published:
          type: string
          format: date-time
          description: The date site info was published.
        updated:
          type: string
          format: date-time
          description: The date this site info was last updated.
        icon:
          type: string
          format: uri
        banner:
          type: string
          format: uri
        description:
          type: string
        actor_id:
          type: string
          format: uri
          description: The federated actor_id.
          example: https://discuss.tchncs.de/
        last_refreshed_at:
          type: string
          format: date-time
        inbox_url:
          type: string
          format: uri
        public_key:
          type: string
        instance_id:
          $ref: '#/components/schemas/InstanceID'

    LocalSite:
      type: object
      required:
        - id
        - site_id
        - site_setup
        - enable_downvotes
        - enable_nsfw
        - community_creation_admin_only
        - require_email_verification
        - private_instance
        - default_theme
        - default_post_listing_type
        - hide_modlog_mod_names
        - application_email_admins
        - actor_name_max_length
        - federation_enabled
        - captcha_enabled
        - captcha_difficulty
        - published
        - registration_mode
        - reports_email_admins
        - federation_signed_fetch
      properties:
        id:
          $ref: '#/components/schemas/LocalSiteID'
        site_id:
          $ref: '#/components/schemas/SiteID'
        site_setup:
          type: boolean
          description: True if the site is set up.
        enable_downvotes:
          type: boolean
          description: Whether downvotes are enabled.
        enable_nsfw:
          type: boolean
          description: Whether NSFW is enabled.
        community_creation_admin_only:
          type: boolean
          description: Whether only admins can create communities.
        require_email_verification:
          type: boolean
          description: Whether emails are required.
        application_question:
          type: string
          description: An optional registration application questionnaire in markdown.
        private_instance:
          type: boolean
          description: Whether the instance is private or public.
        default_theme:
          type: string
          description: The default front-end theme.
        default_post_listing_type:
          $ref: '#/components/schemas/ListingType'
        legal_information:
          type: string
          description: An optional legal disclaimer page.
        hide_modlog_mod_names:
          type: boolean
        application_email_admins:
          type: boolean
        slur_filter_regex:
          type: string
          description: An optional regex to filter words.
        actor_name_max_length:
          type: integer
          format: int32
          description: The max actor name length.
        federation_enabled:
          type: boolean
          description: Whether federation is enabled.
        captcha_enabled:
          type: boolean
          description: Whether captcha is enabled.
        captcha_difficulty:
          type: string
          description: The captcha difficulty.
        published:
          type: string
          format: date-time
          description: The date this site info was published.
        updated:
          type: string
          format: date-time
          description: The date this site info was last updated.
        registration_mode:
          $ref: '#/components/schemas/RegistrationMode'
        reports_email_admins:
          type: boolean
          description: Whether to email admins on new reports.
        federation_signed_fetch:
          type: boolean
          description: Whether to sign outgoing Activitypub fetches with private key of local instance. Some Fediverse instances and platforms require this.

    LocalSiteRateLimit:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/local_site_rate_limit.rs
      type: object
      description: Rate limits for your site. Given in count / length of time.
      required:
        - local_site_id
        - message
        - message_per_second
        - post
        - post_per_second
        - register
        - register_per_second
        - image
        - image_per_second
        - comment
        - comment_per_second
        - search
        - search_per_second
        - published
        - import_user_settings
        - import_user_settings_per_second
      properties:
        local_site_id:
          $ref: '#/components/schemas/LocalSiteID'
        message:
          type: integer
          format: int32
        message_per_second:
          type: integer
          format: int32
        post:
          type: integer
          format: int32
        post_per_second:
          type: integer
          format: int32
        register:
          type: integer
          format: int32
        register_per_second:
          type: integer
          format: int32
        image:
          type: integer
          format: int32
        image_per_second:
          type: integer
          format: int32
        comment:
          type: integer
          format: int32
        comment_per_second:
          type: integer
          format: int32
        search:
          type: integer
          format: int32
        search_per_second:
          type: integer
          format: int32
        published:
          type: string
          format: date-time
          description: The date this site info was published.
        updated:
          type: string
          format: date-time
          description: The date this site info was last updated.
        import_user_settings:
          type: integer
          format: int32
        import_user_settings_per_second:
          type: integer
          format: int32

    SiteAggregates:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/aggregates/structs.rs
      type: object
      required:
        - site_id
        - users
        - posts
        - comments
        - communities
        - users_active_day
        - users_active_week
        - users_active_month
        - users_active_half_year
      properties:
        site_id:
          $ref: '#/components/schemas/SiteID'
        users:
          type: integer
          format: int64
        posts:
          type: integer
          format: int64
        comments:
          type: integer
          format: int64
        communities:
          type: integer
          format: int64
        users_active_day:
          type: integer
          format: int64
          description: The number of users with any activity in the last day.
        users_active_week:
          type: integer
          format: int64
          description: The number of users with any activity in the last week.
        users_active_month:
          type: integer
          format: int64
          description: The number of users with any activity in the last month.
        users_active_half_year:
          type: integer
          format: int64
          description: The number of users with any activity in the last half year.

    MyUserInfo:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      required:
        - local_user_view
        - follows
        - moderates
        - community_blocks
        - person_blocks
        - discussion_languages
      properties:
        local_user_view:
          $ref: '#/components/schemas/LocalUserView'
        follows:
          type: array
          items:
            $ref: '#/components/schemas/CommunityFollowerView'
        moderates:
          type: array
          items:
            $ref: '#/components/schemas/CommunityModeratorView'
        community_blocks:
          type: array
          items:
            $ref: '#/components/schemas/CommunityBlockView'
        person_blocks:
          type: array
          items:
            $ref: '#/components/schemas/PersonBlockView'
        discussion_languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageID'

    LocalUserView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      type: object
      required:
        - local_user
        - person
        - counts
      properties:
        local_user:
          $ref: '#/components/schemas/LocalUser'
        person:
          $ref: '#/components/schemas/Person'
        counts:
          $ref: '#/components/schemas/PersonAggregates'

    LocalUser:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/local_user.rs
      type: object
      required:
        - id
        - person_id
        - show_nsfw
        - theme
        - default_sort_type
        - default_listing_type
        - interface_language
        - show_avatars
        - send_notifications_to_email
        - show_scores
        - show_bot_accounts
        - show_read_posts
        - email_verified
        - accepted_application
        - open_links_in_new_tab
        - blur_nsfw
        - auto_expand
        - infinite_scroll_enabled
        - admin
        - post_listing_mode
        - totp_2fa_enabled
        - enable_keyboard_navigation
        - enable_animated_images
        - collapse_bot_comments
      properties:
        id:
          $ref: '#/components/schemas/LocalUserID'
        person_id:
          description: The person_id for the local user.
          $ref: '#/components/schemas/PersonID'
        email:
          type: string
          format: email
          description: User's email address.
        show_nsfw:
          type: boolean
          description: Whether to show NSFW content.
        theme:
          type: string
          description: User's theme. e.g. "browser".
        default_sort_type:
          $ref: '#/components/schemas/SortType'
          description: The default sort type for the user.
        default_listing_type:
          $ref: '#/components/schemas/ListingType'
          description: The default listing type.
        interface_language:
          type: string
          description: The language of the Lemmy interface.
        show_avatars:
          type: boolean
          description: Whether to show avatars.
        send_notifications_to_email:
          type: boolean
          description: Whether to send notifications to users email address.
        show_scores:
          type: boolean
          description: Whether to show comment / post scores.
        show_bot_accounts:
          type: boolean
          description: Whether to show bot accounts.
        show_read_posts:
          type: boolean
          description: Whether to show read posts.
        email_verified:
          type: boolean
          description: Whether their email has been verified.
        accepted_application:
          type: boolean
          description: Whether their registration application has been accepted.
        open_links_in_new_tab:
          type: boolean
          description: Open links in a new tab.
        blur_nsfw:
          type: boolean
        auto_expand:
          type: boolean
        infinite_scroll_enabled:
          type: boolean
          description: Whether infinite scroll is enabled.
        admin:
          type: boolean
          description: Whether the person is an admin.
        post_listing_mode:
          $ref: '#/components/schemas/PostListingMode'
        totp_2fa_enabled:
          type: boolean
        enable_keyboard_navigation:
          type: boolean
          description: Whether to allow keyboard navigation (for browsing and interacting with posts and comments).
        enable_animated_images:
          type: boolean
          description: Whether user avatars and inline images in the UI that are gifs should be allowed to play or should be paused
        collapse_bot_comments:
          type: boolean
          description: Whether to auto-collapse bot comments.

    Tagline:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/tagline.rs
      type: object
      description: A tagline, shown at the top of your site.
      required:
        - id
        - local_site_id
        - content
        - published
      properties:
        id:
          type: integer
          format: int32
        local_site_id:
          $ref: '#/components/schemas/LocalSiteID'
        content:
          type: string
        published:
          type: string
          format: date-time
          description: The date this tagline was published.
        updated:
          type: string
          format: date-time
          description: The date this tagline was last updated.

    CustomEmojiView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      type: object
      description: A custom emoji view.
      required:
        - custom_emoji
        - keywords
      properties:
        custom_emoji:
          $ref: '#/components/schemas/CustomEmoji'
        keywords:
          type: array
          items:
            $ref: '#/components/schemas/CustomEmojiKeyword'

    CustomEmoji:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/custom_emoji.rs
      type: object
      description: A custom emoji.
      required:
        - id
        - local_site_id
        - shortcode
        - image_url
        - alt_text
        - category
        - published
      properties:
        id:
          $ref: '#/components/schemas/CustomEmojiID'
        local_site_id:
          $ref: '#/components/schemas/LocalSiteID'
        shortcode:
          type: string
        image_url:
          type: string
          format: uri
        alt_text:
          type: string
        category:
          type: string
        published:
          type: string
          format: date-time
          description: The date this emoji was published.
        updated:
          type: string
          format: date-time
          description: The date this emoji was last updated.

    CustomEmojiKeyword:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/custom_emoji_keyword.rs
      type: object
      description: A custom keyword for an emoji.
      required:
        - custom_emoji_id
        - keyword
      properties:
        custom_emoji_id:
          $ref: '#/components/schemas/CustomEmojiID'
        keyword:
          type: string

    CommunityFollowerView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_actor/src/structs.rs
      type: object
      description: A community follower.
      required:
        - community
        - follower
      properties:
        community:
          $ref: '#/components/schemas/Community'
        follower:
          $ref: '#/components/schemas/Person'

    CommunityBlockView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_actor/src/structs.rs
      type: object
      description: A community block.
      required:
        - person
        - community
      properties:
        person:
          $ref: '#/components/schemas/Person'
        community:
          $ref: '#/components/schemas/Community'

    PersonBlockView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_actor/src/structs.rs
      type: object
      description: A person block.
      required:
        - person
        - target
      properties:
        person:
          $ref: '#/components/schemas/Person'
        target:
          $ref: '#/components/schemas/Person'

    ResolveObjectResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      description: The response of an apub object fetch.
      properties:
        comment:
          $ref: '#/components/schemas/CommentView'
        post:
          $ref: '#/components/schemas/PostView'
        community:
          $ref: '#/components/schemas/CommunityView'
        person:
          $ref: '#/components/schemas/PersonView'

    CreateSite:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      summary: Creates a site
      description: Should be done after first running Lemmy.
      required:
        - name
      properties:
        name:
          type: string
        sidebar:
          type: string
        description:
          type: string
          description: A shorter, one line description of your site.
        icon:
          type: string
          description: A url for your site's icon.
        banner:
          type: string
          description: A url for your site's banner.
        enable_downvotes:
          type: boolean
          description: Whether to enable downvotes
        enable_nsfw:
          type: boolean
          description: Whether to enable NSFW.
        community_creation_admin_only:
          type: boolean
          description: Limits community creation to admins only.
        require_email_verification:
          type: boolean
          description: Whether to require email verification
        application_question:
          type: string
          description: Your application question form. This is in markdown, and can be many questions.
        private_instance:
          type: boolean
          description: Whether your instance is public, or private
        default_theme:
          type: string
          description: The default theme. Usually "browser"
        default_post_listing_type:
          $ref: '#/components/schemas/ListingType'
        legal_information:
          type: string
          description: An optional page of legal information
        application_email_admins:
          type: boolean
          description: Whether to email admins when receiving a new application.
        hide_modlog_mod_names:
          type: boolean
          description: Whether to hide moderator names from the modlog.
        discussion_languages:
          type: array
          description: A list of allowed discussion languages.
          items:
            $ref: '#/components/schemas/LanguageID'
        slur_filter_regex:
          type: string
          description: A regex string of items to filter.
        actor_name_max_length:
          type: integer
          format: int32
          description: The max length of actor names.
        rate_limit_message:
          type: integer
          format: int32
          description: The number of messages allowed in a given time frame
        rate_limit_message_per_second:
          type: integer
          format: int32
          description: The number of messages allowed in a given time frame
        rate_limit_post:
          type: integer
          format: int32
          description: The number of posts allowed in a given time frame.
        rate_limit_post_per_second:
          type: integer
          format: int32
          description: The number of posts allowed in a given time frame.
        rate_limit_register:
          type: integer
          format: int32
          description: The number of registrations allowed in a given time frame.
        rate_limit_register_per_second:
          type: integer
          format: int32
          description: The number of registrations allowed in a given time frame.
        rate_limit_image:
          type: integer
          format: int32
          description: The number of image uploads allowed in a given time frame.
        rate_limit_image_per_second:
          type: integer
          format: int32
          description: The number of image uploads allowed in a given time frame.
        rate_limit_comment:
          type: integer
          format: int32
          description: The number of comments allowed in a given time frame.
        rate_limit_comment_per_second:
          type: integer
          format: int32
          description: The number of comments allowed in a given time frame.
        rate_limit_search:
          type: integer
          format: int32
          description: The number of searches allowed in a given time frame.
        rate_limit_search_per_second:
          type: integer
          format: int32
          description: The number of searches allowed in a given time frame.
        federation_enabled:
          type: boolean
          description: Whether to enable federation.
        federation_debug:
          type: boolean
          description: Enables federation debugging.
        captcha_enabled:
          type: boolean
          description: Whether to enable captchas for signups.
        captcha_difficulty:
          type: string
          description: The captcha difficulty. Can be easy, medium, or hard
        allowed_instances:
          type: array
          description: A list of allowed instances. If none are set, federation is open.
          items:
            type: string
        blocked_instances:
          type: array
          description: A list of blocked instances.
          items:
            type: string
        taglines:
          type: array
          description: A list of taglines shown at the top of the front page.
          items:
            type: string
        registration_mode:
          $ref: '#/components/schemas/RegistrationMode'

    EditSite:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      summary: Edits a site
      properties:
        name:
          type: string
        sidebar:
          type: string
        description:
          type: string
          description: A shorter, one line description of your site.
        icon:
          type: string
          description: A url for your site's icon.
        banner:
          type: string
          description: A url for your site's banner.
        enable_downvotes:
          type: boolean
          description: Whether to enable downvotes.
        enable_nsfw:
          type: boolean
          description: Whether to enable NSFW.
        community_creation_admin_only:
          type: boolean
          description: Limits community creation to admins only.
        require_email_verification:
          type: boolean
          description: Whether to require email verification
        application_question:
          type: string
          description: Your application question form. This is in markdown, and can be many questions.
        private_instance:
          type: boolean
          description: Whether your instance is public, or private
        default_theme:
          type: string
          description: The default theme. Usually "browser"
        default_post_listing_type:
          $ref: '#/components/schemas/ListingType'
        legal_information:
          type: string
          description: An optional page of legal information
        application_email_admins:
          type: boolean
          description: Whether to email admins when receiving a new application.
        hide_modlog_mod_names:
          type: boolean
          description: Whether to hide moderator names from the modlog.
        discussion_languages:
          type: array
          description: A list of allowed discussion languages.
          items:
            $ref: '#/components/schemas/LanguageID'
        slur_filter_regex:
          type: string
          description: A regex string of items to filter.
        actor_name_max_length:
          type: integer
          format: int32
          description: The max length of actor names.
        rate_limit_message:
          type: integer
          format: int32
          description: The number of messages allowed in a given time frame
        rate_limit_message_per_second:
          type: integer
          format: int32
          description: The number of messages allowed in a given time frame
        rate_limit_post:
          type: integer
          format: int32
          description: The number of posts allowed in a given time frame.
        rate_limit_post_per_second:
          type: integer
          format: int32
          description: The number of posts allowed in a given time frame.
        rate_limit_register:
          type: integer
          format: int32
          description: The number of registrations allowed in a given time frame.
        rate_limit_register_per_second:
          type: integer
          format: int32
          description: The number of registrations allowed in a given time frame.
        rate_limit_image:
          type: integer
          format: int32
          description: The number of image uploads allowed in a given time frame.
        rate_limit_image_per_second:
          type: integer
          format: int32
          description: The number of image uploads allowed in a given time frame.
        rate_limit_comment:
          type: integer
          format: int32
          description: The number of comments allowed in a given time frame.
        rate_limit_comment_per_second:
          type: integer
          format: int32
          description: The number of comments allowed in a given time frame.
        rate_limit_search:
          type: integer
          format: int32
          description: The number of searches allowed in a given time frame.
        rate_limit_search_per_second:
          type: integer
          format: int32
          description: The number of searches allowed in a given time frame.
        federation_enabled:
          type: boolean
          description: Whether to enable federation.
        federation_debug:
          type: boolean
          description: Enables federation debugging.
        captcha_enabled:
          type: boolean
          description: Whether to enable captchas for signups.
        captcha_difficulty:
          type: string
          description: The captcha difficulty. Can be easy, medium, or hard
        allowed_instances:
          type: array
          description: A list of allowed instances. If none are set, federation is open.
          items:
            type: string
        blocked_instances:
          type: array
          description: A list of blocked instances.
          items:
            type: string
        taglines:
          type: array
          description: A list of taglines shown at the top of the front page.
          items:
            type: string
        registration_mode:
          $ref: '#/components/schemas/RegistrationMode'
        reports_email_admins:
          type: boolean
          description: Whether to email admins for new reports.

    SiteResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      description: The response for a site.
      required:
        - site_view
        - taglines
      properties:
        site_view:
          $ref: '#/components/schemas/SiteView'
        taglines:
          type: array
          items:
            $ref: '#/components/schemas/Tagline'

    GenerateTotpSecretResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      required:
        - totp_secret_url
      properties:
        totp_secret_url:
          type: string

    LoginToken:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/login_token.rs
      type: object
      required:
        - user_id
        - published
      properties:
        user_id:
          $ref: '#/components/schemas/LocalUserID'
        published:
          type: string
          format: date-time
          description: Time of login.
        ip:
          type: string
          description: |
            IP address where login was made from, allows invalidating logins by IP address.
            Could be stored in truncated format, or store derived information for better privacy.
        user_agent:
          type: string

    UpdateTotp:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      required:
        - totp_token
        - enabled
      properties:
        totp_token:
          type: string
        enabled:
          type: boolean

    UpdateTotpResponse:
      type: object
      required:
        - enabled
      properties:
        enabled:
          type: boolean

    GetModlogResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      required:
        - removed_posts
        - locked_posts
        - featured_posts
        - removed_comments
        - removed_communities
        - banned_from_community
        - banned
        - added_to_community
        - transferred_to_community
        - added
        - admin_purged_persons
        - admin_purged_communities
        - admin_purged_posts
        - admin_purged_comments
        - hidden_communities
      properties:
        removed_posts:
          type: array
          items:
            $ref: '#/components/schemas/ModRemovePostView'
        locked_posts:
          type: array
          items:
            $ref: '#/components/schemas/ModLockPostView'
        featured_posts:
          type: array
          items:
            $ref: '#/components/schemas/ModFeaturePostView'
        removed_comments:
          type: array
          items:
            $ref: '#/components/schemas/ModRemoveCommentView'
        removed_communities:
          type: array
          items:
            $ref: '#/components/schemas/ModRemoveCommunityView'
        banned_from_community:
          type: array
          items:
            $ref: '#/components/schemas/ModBanFromCommunityView'
        banned:
          type: array
          items:
            $ref: '#/components/schemas/ModBanView'
        added_to_community:
          type: array
          items:
            $ref: '#/components/schemas/ModAddCommunityView'
        transferred_to_community:
          type: array
          items:
            $ref: '#/components/schemas/ModTransferCommunityView'
        added:
          type: array
          items:
            $ref: '#/components/schemas/ModAddView'
        admin_purged_persons:
          type: array
          items:
            $ref: '#/components/schemas/AdminPurgePersonView'
        admin_purged_communities:
          type: array
          items:
            $ref: '#/components/schemas/AdminPurgeCommunityView'
        admin_purged_posts:
          type: array
          items:
            $ref: '#/components/schemas/AdminPurgePostView'
        admin_purged_comments:
          type: array
          items:
            $ref: '#/components/schemas/AdminPurgeCommentView'
        hidden_communities:
          type: array
          items:
            $ref: '#/components/schemas/ModHideCommunityView'

    ModRemovePostView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      type: object
      description: When a moderator removes a post.
      required:
        - mod_remove_post
        - post
        - community
      properties:
        mod_remove_post:
          $ref: '#/components/schemas/ModRemovePost'
        moderator:
          $ref: '#/components/schemas/Person'
        post:
          $ref: '#/components/schemas/Post'
        community:
          $ref: '#/components/schemas/Community'

    ModRemovePost:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      type: object
      description: When a moderator removes a post.
      required:
        - id
        - mod_person_id
        - post_id
        - removed
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        post_id:
          $ref: '#/components/schemas/PostID'
        reason:
          type: string
        removed:
          type: boolean
        when_:
          type: string
          format: date-time

    ModLockPostView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      type: object
      description: When a moderator locks a post (prevents new comments being made).
      required:
        - mod_lock_post
        - post
        - community
      properties:
        mod_lock_post:
          $ref: '#/components/schemas/ModLockPost'
        moderator:
          $ref: '#/components/schemas/Person'
        post:
          $ref: '#/components/schemas/Post'
        community:
          $ref: '#/components/schemas/Community'

    ModLockPost:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      type: object
      description: When a moderator locks a post (prevents new comments being made).
      required:
        - id
        - mod_person_id
        - post_id
        - locked
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        post_id:
          $ref: '#/components/schemas/PostID'
        locked:
          type: boolean
        when_:
          type: string
          format: date-time

    ModFeaturePostView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      type: object
      description: When a moderator locks a post (prevents new comments being made).
      required:
        - mod_feature_post
        - post
        - community
      properties:
        mod_feature_post:
          $ref: '#/components/schemas/ModFeaturePost'
        moderator:
          $ref: '#/components/schemas/Person'
        post:
          $ref: '#/components/schemas/Post'
        community:
          $ref: '#/components/schemas/Community'

    ModFeaturePost:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      type: object
      description: When a moderator locks a post (prevents new comments being made).
      required:
        - id
        - mod_person_id
        - post_id
        - featured
        - when_
        - is_featured_community
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        post_id:
          $ref: '#/components/schemas/PostID'
        featured:
          type: boolean
        when_:
          type: string
          format: date-time
        is_featured_community:
          type: boolean

    ModRemoveCommentView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      type: object
      description: When a moderator removes a comment.
      required:
        - mod_remove_comment
        - comment
        - commenter
        - post
        - community
      properties:
        mod_remove_comment:
          $ref: '#/components/schemas/ModRemoveComment'
        moderator:
          $ref: '#/components/schemas/Person'
        comment:
          $ref: '#/components/schemas/Comment'
        commenter:
          $ref: '#/components/schemas/Person'
        post:
          $ref: '#/components/schemas/Post'
        community:
          $ref: '#/components/schemas/Community'

    ModRemoveComment:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      type: object
      description: When a moderator removes a comment.
      required:
        - id
        - mod_person_id
        - comment_id
        - removed
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        comment_id:
          $ref: '#/components/schemas/CommentID'
        reason:
          type: string
        removed:
          type: boolean
        when_:
          type: string
          format: date-time

    ModRemoveCommunityView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      type: object
      description: When a moderator removes a community.
      required:
        - mod_remove_community
        - community
      properties:
        mod_remove_community:
          $ref: '#/components/schemas/ModRemoveCommunity'
        moderator:
          $ref: '#/components/schemas/Person'
        community:
          $ref: '#/components/schemas/Community'

    ModRemoveCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      type: object
      description: When a moderator removes a community.
      required:
        - id
        - mod_person_id
        - community_id
        - removed
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        community_id:
          $ref: '#/components/schemas/CommunityID'
        reason:
          type: string
        removed:
          type: boolean
        when_:
          type: string
          format: date-time

    ModBanFromCommunityView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      type: object
      description: When someone is banned from a community.
      required:
        - mod_ban_from_community
        - community
        - banned_person
      properties:
        mod_ban_from_community:
          $ref: '#/components/schemas/ModBanFromCommunity'
        moderator:
          $ref: '#/components/schemas/Person'
        community:
          $ref: '#/components/schemas/Community'
        banned_person:
          $ref: '#/components/schemas/Person'

    ModBanFromCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      type: object
      description: When someone is banned from a community.
      required:
        - id
        - mod_person_id
        - other_person_id
        - community_id
        - banned
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        other_person_id:
          $ref: '#/components/schemas/PersonID'
        community_id:
          $ref: '#/components/schemas/CommunityID'
        reason:
          type: string
        banned:
          type: boolean
        expires:
          type: string
          format: date-time
        when_:
          type: string
          format: date-time

    ModBanView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      type: object
      description: When someone is banned from the site.
      required:
        - mod_ban
        - banned_person
      properties:
        mod_ban:
          $ref: '#/components/schemas/ModBan'
        moderator:
          $ref: '#/components/schemas/Person'
        banned_person:
          $ref: '#/components/schemas/Person'

    ModBan:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      type: object
      description: When someone is banned from the site.
      required:
        - id
        - mod_person_id
        - other_person_id
        - community_id
        - banned
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        other_person_id:
          $ref: '#/components/schemas/PersonID'
        community_id:
          $ref: '#/components/schemas/CommunityID'
        reason:
          type: string
        banned:
          type: boolean
        expires:
          type: string
          format: date-time
        when_:
          type: string
          format: date-time

    ModAddCommunityView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      type: object
      description: When someone is added as a community moderator.
      required:
        - mod_add_community
        - community
        - modded_person
      properties:
        mod_add_community:
          $ref: '#/components/schemas/ModAddCommunity'
        moderator:
          $ref: '#/components/schemas/Person'
        community:
          $ref: '#/components/schemas/Community'
        modded_person:
          $ref: '#/components/schemas/Person'

    ModAddCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      type: object
      description: When someone is added as a community moderator.
      required:
        - id
        - mod_person_id
        - other_person_id
        - community_id
        - removed
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        other_person_id:
          $ref: '#/components/schemas/PersonID'
        community_id:
          $ref: '#/components/schemas/CommunityID'
        reason:
          type: string
        removed:
          type: boolean
        when_:
          type: string
          format: date-time

    ModTransferCommunityView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      type: object
      description: When a moderator transfers a community to a new owner.
      required:
        - mod_transfer_community
        - community
        - modded_person
      properties:
        mod_transfer_community:
          $ref: '#/components/schemas/ModTransferCommunity'
        moderator:
          $ref: '#/components/schemas/Person'
        community:
          $ref: '#/components/schemas/Community'
        modded_person:
          $ref: '#/components/schemas/Person'

    ModTransferCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      type: object
      description: When a moderator transfers a community to a new owner.
      required:
        - id
        - mod_person_id
        - other_person_id
        - community_id
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        other_person_id:
          $ref: '#/components/schemas/PersonID'
        community_id:
          $ref: '#/components/schemas/CommunityID'
        when_:
          type: string
          format: date-time

    ModAddView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      type: object
      description: When someone is added as a site moderator.
      required:
        - mod_add
        - modded_person
      properties:
        mod_add:
          $ref: '#/components/schemas/ModAdd'
        moderator:
          $ref: '#/components/schemas/Person'
        modded_person:
          $ref: '#/components/schemas/Person'

    ModAdd:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      type: object
      description: When someone is added as a site moderator.
      required:
        - id
        - mod_person_id
        - other_person_id
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        other_person_id:
          $ref: '#/components/schemas/PersonID'
        removed:
          type: boolean
        when_:
          type: string
          format: date-time

    AdminPurgePersonView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      type: object
      description: When an admin purges a person.
      required:
        - admin_purge_person
      properties:
        admin_purge_person:
          $ref: '#/components/schemas/AdminPurgePerson'
        admin:
          $ref: '#/components/schemas/Person'

    AdminPurgePerson:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      type: object
      description: When an admin purges a person.
      required:
        - id
        - admin_person_id
        - when_
      properties:
        id:
          type: integer
          format: int32
        admin_person_id:
          $ref: '#/components/schemas/PersonID'
        reason:
          type: string
        when_:
          type: string
          format: date-time

    AdminPurgeCommunityView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      type: object
      description: When an admin purges a community.
      required:
        - admin_purge_community
      properties:
        admin_purge_community:
          $ref: '#/components/schemas/AdminPurgeCommunity'
        admin:
          $ref: '#/components/schemas/Person'

    AdminPurgeCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      type: object
      description: When an admin purges a community.
      required:
        - id
        - admin_person_id
        - when_
      properties:
        id:
          type: integer
          format: int32
        admin_person_id:
          $ref: '#/components/schemas/PersonID'
        reason:
          type: string
        when_:
          type: string
          format: date-time

    AdminPurgePostView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      type: object
      description: When an admin purges a post.
      required:
        - admin_purge_post
        - community
      properties:
        admin_purge_post:
          $ref: '#/components/schemas/AdminPurgePost'
        admin:
          $ref: '#/components/schemas/Person'
        community:
          $ref: '#/components/schemas/Community'

    AdminPurgePost:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      type: object
      description: When an admin purges a post.
      required:
        - id
        - admin_person_id
        - community_id
        - when_
      properties:
        id:
          type: integer
          format: int32
        admin_person_id:
          $ref: '#/components/schemas/PersonID'
        community_id:
          $ref: '#/components/schemas/CommunityID'
        reason:
          type: string
        when_:
          type: string
          format: date-time

    AdminPurgeCommentView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      type: object
      description: When an admin purges a comment.
      required:
        - admin_purge_comment
        - post
      properties:
        admin_purge_comment:
          $ref: '#/components/schemas/AdminPurgeComment'
        admin:
          $ref: '#/components/schemas/Person'
        post:
          $ref: '#/components/schemas/Post'

    AdminPurgeComment:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      type: object
      description: When an admin purges a comment.
      required:
        - id
        - admin_person_id
        - post_id
        - when_
      properties:
        id:
          type: integer
          format: int32
        admin_person_id:
          $ref: '#/components/schemas/PersonID'
        post_id:
          $ref: '#/components/schemas/PostID'
        reason:
          type: string
        when_:
          type: string
          format: date-time

    ModHideCommunityView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      type: object
      description: When a community is hidden from public view.
      required:
        - mod_hide_community
        - community
      properties:
        mod_hide_community:
          $ref: '#/components/schemas/ModHideCommunity'
        admin:
          $ref: '#/components/schemas/Person'
        community:
          $ref: '#/components/schemas/Community'

    ModHideCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      type: object
      description: When a community is hidden from public view.
      required:
        - id
        - community_id
        - mod_person_id
        - when_
        - hidden
      properties:
        id:
          type: integer
          format: int32
        community_id:
          $ref: '#/components/schemas/CommunityID'
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        reason:
          type: string
        when_:
          type: string
          format: date-time
        hidden:
          type: boolean

    SearchResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      description: The search response, containing lists of the return type possibilities.
      required:
        - type_
        - comments
        - posts
        - users
      properties:
        type_:
          $ref: '#/components/schemas/SearchType'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentView'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostView'
        communities:
          type: array
          items:
            $ref: '#/components/schemas/CommunityView'
        users:
          type: array
          items:
            $ref: '#/components/schemas/PersonView'

    CreateCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      type: object
      description: Create a community.
      required:
        - name
        - title
      properties:
        name:
          type: string
          description: The unique name
        title:
          type: string
          description: A longer title.
        description:
          type: string
          description: A longer sidebar, or description of your community, in markdown.
        icon:
          type: string
          format: uri
          description: An icon URL.
        banner:
          type: string
          format: uri
          description: A banner URL.
        nsfw:
          type: boolean
          description: Whether its an NSFW community.
        posting_restricted_to_mods:
          type: boolean
          description: Whether to restrict posting only to moderators.
        discussion_languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageID'

    CommunityResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      type: object
      description: A simple community response.
      required:
        - community_view
        - discussion_languages
      properties:
        community_view:
          $ref: '#/components/schemas/CommunityView'
        discussion_languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageID'

    GetCommunityResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      type: object
      description: The community response.
      required:
        - community_view
        - moderators
        - discussion_languages
      properties:
        community_view:
          $ref: '#/components/schemas/CommunityView'
        site:
          $ref: '#/components/schemas/Site'
        moderators:
          type: array
          items:
            $ref: '#/components/schemas/CommunityModeratorView'
        discussion_languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageID'

    EditCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      type: object
      description: Edit a community.
      required:
        - community_id
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        title:
          type: string
          description: A longer title.
        description:
          type: string
          description: A longer sidebar, or description of your community, in markdown.
        icon:
          type: string
          format: uri
          description: An icon URL.
        banner:
          type: string
          format: uri
          description: A banner URL.
        nsfw:
          type: boolean
          description: Whether its an NSFW community.
        posting_restricted_to_mods:
          type: boolean
          description: Whether to restrict posting only to moderators.
        discussion_languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageID'

    ListCommunitiesResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      type: object
      description: The response for listing communities.
      required:
        - communities
      properties:
        communities:
          type: array
          items:
            $ref: '#/components/schemas/CommunityView'

    FollowCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      type: object
      description: Follow / subscribe to a community.
      required:
        - community_id
        - follow
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        follow:
          type: boolean

    BlockCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      type: object
      description: Block a community.
      required:
        - community_id
        - block
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        block:
          type: boolean

    BlockCommunityResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      type: object
      description: The block community response.
      required:
        - community_view
        - blocked
      properties:
        community_view:
          $ref: '#/components/schemas/CommunityView'
        blocked:
          type: boolean

    DeleteCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      type: object
      description: Delete your own community.
      required:
        - community_id
        - deleted
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        deleted:
          type: boolean

    HideCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      type: object
      description: Hide a community from the main view.
      required:
        - community_id
        - hidden
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        hidden:
          type: boolean
        reason:
          type: string

    RemoveCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      type: object
      description: Remove a community (only doable by moderators).
      required:
        - community_id
        - removed
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        removed:
          type: boolean
        reason:
          type: string

    TransferCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      type: object
      description: Transfer a community to a new owner.
      required:
        - community_id
        - person_id
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        person_id:
          $ref: '#/components/schemas/PersonID'

    BanFromCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      type: object
      description: Ban a user from a community.
      required:
        - community_id
        - person_id
        - ban
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        person_id:
          $ref: '#/components/schemas/PersonID'
        ban:
          type: boolean
        remove_data:
          type: boolean
        reason:
          type: string
        expires:
          type: integer
          format: int64

    BanFromCommunityResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      type: object
      description: The response for banning a user from a community.
      required:
        - person_view
        - banned
      properties:
        person_view:
          $ref: '#/components/schemas/PersonView'
        banned:
          type: boolean

    AddModToCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      type: object
      description: Add a moderator to a community.
      required:
        - community_id
        - person_id
        - added
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        person_id:
          $ref: '#/components/schemas/PersonID'
        added:
          type: boolean

    AddModToCommunityResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      type: object
      description: The response of adding a moderator to a community.
      required:
        - moderators
      properties:
        moderators:
          type: array
          items:
            $ref: '#/components/schemas/CommunityModeratorView'

    CreatePost:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      type: object
      description: Create a post.
      required:
        - name
        - community_id
      properties:
        name:
          type: string
        community_id:
          $ref: '#/components/schemas/CommunityID'
        url:
          type: string
          format: uri
        body:
          type: string
          description: An optional body for the post in markdown
        honeypot:
          type: string
        nsfw:
          type: boolean
        language_id:
          $ref: '#/components/schemas/LanguageID'

    PostResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      type: object
      required:
        - post_view
      properties:
        post_view:
          $ref: '#/components/schemas/PostView'

    EditPost:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      type: object
      description: Edit a post.
      required:
        - post_id
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        name:
          type: string
        url:
          type: string
          format: uri
        body:
          type: string
          description: An optional body for the post in markdown
        nsfw:
          type: boolean
        language_id:
          $ref: '#/components/schemas/LanguageID'

    DeletePost:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      type: object
      description: Delete a post.
      required:
        - post_id
        - deleted
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        deleted:
          type: boolean

    RemovePost:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      type: object
      description: Remove a post (only doable by mods).
      required:
        - post_id
        - removed
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        removed:
          type: boolean
        reason:
          type: string

    MarkPostAsRead:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      type: object
      description: Mark a post as read.
      required:
        - read
      properties:
        post_id:
          deprecated: true
          $ref: '#/components/schemas/PostID'
        post_ids:
          type: array
          items:
            $ref: '#/components/schemas/PostID'
        read:
          type: boolean

    LockPost:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      type: object
      description: Lock a post (prevent new comments).
      required:
        - post_id
        - locked
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        locked:
          type: boolean

    FeaturePost:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      type: object
      description: Feature a post (stickies / pins to the top).
      required:
        - post_id
        - featured
        - feature_type
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        featured:
          type: boolean
        feature_type:
          $ref: '#/components/schemas/PostFeatureType'

    CreatePostLike:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      type: object
      description: Like a post.
      required:
        - post_id
        - score
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        score:
          $ref: '#/components/schemas/MyVote'

    SavePost:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      type: object
      description: Save / bookmark a post.
      required:
        - post_id
        - save
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        save:
          type: boolean

    CreatePostReport:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      type: object
      description: Create a post report.
      required:
        - post_id
        - reason
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        reason:
          type: string

    PostReportResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      type: object
      description: The post report response.
      required:
        - post_report_view
      properties:
        post_report_view:
          $ref: '#/components/schemas/PostReportView'

    PostReportView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      type: object
      description: A post report view.
      required:
        - post_report
        - post
        - community
        - creator
        - post_creator
        - creator_banned_from_community
        - counts
      properties:
        post_report:
          $ref: '#/components/schemas/PostReport'
        post:
          $ref: '#/components/schemas/Post'
        community:
          $ref: '#/components/schemas/Community'
        creator:
          $ref: '#/components/schemas/Person'
        post_creator:
          $ref: '#/components/schemas/Person'
        creator_banned_from_community:
          type: boolean
        my_vote:
          $ref: '#/components/schemas/MyVote'
        counts:
          $ref: '#/components/schemas/PostAggregates'
        resolver:
          $ref: '#/components/schemas/Person'

    PostReport:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/post_report.rs
      type: object
      description: A post report.
      required:
        - id
        - creator_id
        - post_id
        - original_post_name
        - reason
        - resolved
        - published
      properties:
        id:
          $ref: '#/components/schemas/PostReportID'
        creator_id:
          $ref: '#/components/schemas/PersonID'
        post_id:
          $ref: '#/components/schemas/PostID'
        original_post_name:
          type: string
          description: The original post title.
        original_post_url:
          type: string
          format: uri
          description: The original post url.
        original_post_body:
          type: string
          description: The original post body.
        reason:
          type: string
        resolved:
          type: boolean
        resolver_id:
          $ref: '#/components/schemas/PersonID'
        published:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time

    ResolvePostReport:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      type: object
      description: Resolve a post report (mods only).
      required:
        - report_id
        - resolved
      properties:
        report_id:
          $ref: '#/components/schemas/PostReportID'
        resolved:
          type: boolean

    ListPostReportsResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      type: object
      description: The post reports response.
      required:
        - post_reports
      properties:
        post_reports:
          type: array
          items:
            $ref: '#/components/schemas/PostReportView'

    GetSiteMetadataResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      type: object
      description: The site metadata response.
      required:
        - metadata
      properties:
        metadata:
          $ref: '#/components/schemas/SiteMetadata'

    SiteMetadata:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      type: object
      description: The site metadata.
      properties:
        title:
          type: string
        description:
          type: string
        image:
          type: string
          format: uri
        embed_video_url:
          type: string
          format: uri

    CreateComment:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/comment.rs
      type: object
      description: Create a comment.
      required:
        - content
        - post_id
      properties:
        content:
          type: string
        post_id:
          $ref: '#/components/schemas/PostID'
        parent_id:
          $ref: '#/components/schemas/CommentID'
        language_id:
          $ref: '#/components/schemas/LanguageID'

    CommentResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/comment.rs
      type: object
      description: A comment response.
      required:
        - comment_view
        - recipient_ids
      properties:
        comment_view:
          $ref: '#/components/schemas/CommentView'
        recipient_ids:
          type: array
          items:
            $ref: '#/components/schemas/LocalUserID'

    EditComment:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/comment.rs
      type: object
      description: Edit a comment.
      required:
        - comment_id
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentID'
        content:
          type: string
        language_id:
          $ref: '#/components/schemas/LanguageID'

    DeleteComment:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/comment.rs
      type: object
      description: Delete a comment.
      required:
        - comment_id
        - deleted
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentID'
        deleted:
          type: boolean

    RemoveComment:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/comment.rs
      type: object
      description: Remove a comment (only doable by mods).
      required:
        - comment_id
        - removed
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentID'
        removed:
          type: boolean
        reason:
          type: string

    MarkCommentReplyAsRead:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: Mark a comment reply as read.
      required:
        - comment_reply_id
        - read
      properties:
        comment_reply_id:
          $ref: '#/components/schemas/CommentReplyID'
        read:
          type: boolean

    CommentReplyResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: The response for a comment reply action.
      required:
        - comment_reply_view
      properties:
        comment_reply_view:
          $ref: '#/components/schemas/CommentReplyView'

    CommentReplyView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_actor/src/structs.rs
      type: object
      description: A comment reply view.
      required:
        - comment_reply
        - comment
        - creator
        - post
        - community
        - recipient
        - counts
        - creator_banned_from_community
        - creator_is_moderator
        - creator_is_admin
        - subscribed
        - saved
        - creator_blocked
      properties:
        comment_reply:
          $ref: '#/components/schemas/CommentReply'
        comment:
          $ref: '#/components/schemas/Comment'
        creator:
          $ref: '#/components/schemas/Person'
        post:
          $ref: '#/components/schemas/Post'
        community:
          $ref: '#/components/schemas/Community'
        recipient:
          $ref: '#/components/schemas/Person'
        counts:
          $ref: '#/components/schemas/CommentAggregates'
        creator_banned_from_community:
          type: boolean
        creator_is_moderator:
          type: boolean
        creator_is_admin:
          type: boolean
        subscribed:
          $ref: '#/components/schemas/SubscribedType'
        saved:
          type: boolean
        creator_blocked:
          type: boolean
        my_vote:
          $ref: '#/components/schemas/MyVote'

    CommentReply:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/comment_reply.rs
      type: object
      description: A comment reply.
      required:
        - id
        - recipient_id
        - comment_id
        - read
        - published
      properties:
        id:
          $ref: '#/components/schemas/CommentReplyID'
        recipient_id:
          $ref: '#/components/schemas/PersonID'
        comment_id:
          $ref: '#/components/schemas/CommentID'
        read:
          type: boolean
        published:
          type: string
          format: date-time

    CreateCommentLike:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/comment.rs
      type: object
      description: Like a comment.
      required:
        - comment_id
        - score
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentID'
        score:
          $ref: '#/components/schemas/MyVote'

    SaveComment:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/comment.rs
      type: object
      description: Save / bookmark a comment.
      required:
        - comment_id
        - save
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentID'
        save:
          type: boolean

    DistinguishComment:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/comment.rs
      type: object
      description: Distinguish a comment (i.e. speak as moderator).
      required:
        - comment_id
        - distinguished
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentID'
        distinguished:
          type: boolean

    CreateCommentReport:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/comment.rs
      type: object
      description: Report a comment.
      required:
        - comment_id
        - reason
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentID'
        reason:
          type: string

    CommentReportResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/comment.rs
      type: object
      description: The comment report response.
      required:
        - comment_report_view
      properties:
        comment_report_view:
          $ref: '#/components/schemas/CommentReportView'

    CommentReportView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      type: object
      description: A comment report view.
      required:
        - comment_report
        - comment
        - post
        - community
        - creator
        - comment_creator
        - counts
        - creator_banned_from_community
      properties:
        comment_report:
          $ref: '#/components/schemas/CommentReport'
        comment:
          $ref: '#/components/schemas/Comment'
        post:
          $ref: '#/components/schemas/Post'
        community:
          $ref: '#/components/schemas/Community'
        creator:
          $ref: '#/components/schemas/Person'
        comment_creator:
          $ref: '#/components/schemas/Person'
        counts:
          $ref: '#/components/schemas/CommentAggregates'
        creator_banned_from_community:
          type: boolean
        my_vote:
          $ref: '#/components/schemas/MyVote'
        resolver:
          $ref: '#/components/schemas/Person'

    CommentReport:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/comment_report.rs
      type: object
      description: A comment report.
      required:
        - id
        - creator_id
        - comment_id
        - original_comment_text
        - reason
        - resolved
        - published
      properties:
        id:
          $ref: '#/components/schemas/CommentReportID'
        creator_id:
          $ref: '#/components/schemas/PersonID'
        comment_id:
          $ref: '#/components/schemas/CommentID'
        original_comment_text:
          type: string
        reason:
          type: string
        resolved:
          type: boolean
        resolver_id:
          $ref: '#/components/schemas/PersonID'
        published:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time

    ResolveCommentReport:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/comment.rs
      type: object
      description: Resolve a comment report (only doable by mods).
      required:
        - report_id
        - resolved
      properties:
        report_id:
          $ref: '#/components/schemas/CommentReportID'
        resolved:
          type: boolean

    ListCommentReportsResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/comment.rs
      type: object
      description: The comment report list response.
      required:
        - comment_reports
      properties:
        comment_reports:
          type: array
          items:
            $ref: '#/components/schemas/CommentReportView'

    PrivateMessagesResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/private_message.rs
      type: object
      description: The private messages response.
      required:
        - private_messages
      properties:
        private_messages:
          type: array
          items:
            $ref: '#/components/schemas/PrivateMessageView'

    PrivateMessageView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      type: object
      description: A private message view.
      required:
        - private_message
        - creator
        - recipient
      properties:
        private_message:
          $ref: '#/components/schemas/PrivateMessage'
        creator:
          $ref: '#/components/schemas/Person'
        recipient:
          $ref: '#/components/schemas/Person'

    PrivateMessage:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/private_message.rs
      type: object
      description: A private message.
      required:
        - id
        - creator_id
        - recipient_id
        - content
        - deleted
        - read
        - published
        - ap_id
        - local
      properties:
        id:
          $ref: '#/components/schemas/PrivateMessageID'
        creator_id:
          $ref: '#/components/schemas/PersonID'
        recipient_id:
          $ref: '#/components/schemas/PersonID'
        content:
          type: string
        deleted:
          type: boolean
        read:
          type: boolean
        published:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        ap_id:
          type: string
          format: uri
          description: The federated activity id / ap_id.
        local:
          type: boolean

    CreatePrivateMessage:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/private_message.rs
      type: object
      description: Create a private message.
      required:
        - content
        - recipient_id
      properties:
        content:
          type: string
        recipient_id:
          $ref: '#/components/schemas/PersonID'

    PrivateMessageResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/private_message.rs
      type: object
      description: A single private message response.
      required:
        - private_message_view
      properties:
        private_message_view:
          $ref: '#/components/schemas/PrivateMessageView'

    EditPrivateMessage:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/private_message.rs
      type: object
      description: Edit a private message.
      required:
        - private_message_id
        - content
      properties:
        private_message_id:
          $ref: '#/components/schemas/PrivateMessageID'
        content:
          type: string

    DeletePrivateMessage:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/private_message.rs
      type: object
      description: Delete a private message.
      required:
        - private_message_id
        - deleted
      properties:
        private_message_id:
          $ref: '#/components/schemas/PrivateMessageID'
        deleted:
          type: boolean

    MarkPrivateMessageAsRead:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/private_message.rs
      type: object
      description: Mark a private message as read.
      required:
        - private_message_id
        - read
      properties:
        private_message_id:
          $ref: '#/components/schemas/PrivateMessageID'
        read:
          type: boolean

    CreatePrivateMessageReport:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/private_message.rs
      type: object
      description: Create a report for a private message.
      required:
        - private_message_id
        - reason
      properties:
        private_message_id:
          $ref: '#/components/schemas/PrivateMessageID'
        reason:
          type: string

    PrivateMessageReportResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/private_message.rs
      type: object
      description: A private message report response.
      required:
        - private_message_report_view
      properties:
        private_message_report_view:
          $ref: '#/components/schemas/PrivateMessageReportView'

    PrivateMessageReportView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      type: object
      description: A private message report view.
      required:
        - private_message_report
        - private_message
        - private_message_creator
        - creator
      properties:
        private_message_report:
          $ref: '#/components/schemas/PrivateMessageReport'
        private_message:
          $ref: '#/components/schemas/PrivateMessage'
        private_message_creator:
          $ref: '#/components/schemas/Person'
        creator:
          $ref: '#/components/schemas/Person'
        resolver:
          $ref: '#/components/schemas/Person'

    PrivateMessageReport:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/private_message.rs
      type: object
      description: A private message report.
      required:
        - id
        - creator_id
        - private_message_id
        - original_pm_text
        - reason
        - resolved
        - resolver_id
        - published
      properties:
        id:
          $ref: '#/components/schemas/PrivateMessageReportID'
        creator_id:
          $ref: '#/components/schemas/PersonID'
        private_message_id:
          $ref: '#/components/schemas/PrivateMessageID'
        original_pm_text:
          type: string
        reason:
          type: string
        resolved:
          type: boolean
        resolver_id:
          $ref: '#/components/schemas/PersonID'
        published:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time

    ResolvePrivateMessageReport:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/private_message.rs
      type: object
      description: Resolve a private message report
      required:
        - report_id
        - resolved
      properties:
        report_id:
          $ref: '#/components/schemas/PrivateMessageReportID'
        resolved:
          type: boolean

    ListPrivateMessageReportsResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/private_message.rs
      type: object
      description: The response for list private message reports
      required:
        - private_message_reports
      properties:
        private_message_reports:
          type: array
          items:
            $ref: '#/components/schemas/PrivateMessageReportView'

    Register:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: Register / Sign up to Lemmy.
      required:
        - username
        - password
        - password_verify
        - show_nsfw
      properties:
        username:
          type: string
          description: Username (aka nickname aka short users' name).
        password:
          type: string
          format: password
        password_verify:
          type: string
          format: password
        show_nsfw:
          type: boolean
        email:
          type: string
          format: email
          description: |
            Email address.

            Email is mandatory if email verification is enabled on the server.
        captcha_uuid:
          type: string
          description: The UUID of the captcha item.
        captcha_answer:
          type: string
          description: Your captcha answer.
        honeypot:
          type: string
        answer:
          type: string
          description: An answer is mandatory if require application is enabled on the server.

    MarkPersonMentionAsRead:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: Mark a person mention as read.
      required:
        - person_mention_id
        - read
      properties:
        person_mention_id:
          $ref: '#/components/schemas/PersonMentionID'
        read:
          type: boolean

    PersonMentionResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: The response for a person mention action.
      required:
        - person_mention_view
      properties:
        person_mention_view:
          $ref: '#/components/schemas/PersonMentionView'

    GetRepliesResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: Fetches your replies
      required:
        - replies
      properties:
        replies:
          type: array
          items:
            $ref: '#/components/schemas/CommentReplyView'

    BanPerson:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: Ban a person from the site.
      required:
        - person_id
        - ban
      properties:
        person_id:
          $ref: '#/components/schemas/PersonID'
        ban:
          type: boolean
        remove_data:
          type: boolean
          description: Optionally remove all their data. Useful for new troll accounts.
        reason:
          type: string
        expires:
          type: integer
          format: int64
          description: A time that the ban will expire, in unix epoch seconds.

    BanPersonResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: A response for a banned person.
      required:
        - person_view
        - banned
      properties:
        person_view:
          $ref: '#/components/schemas/PersonView'
        banned:
          type: boolean

    BannedPersonsResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: The list of banned persons.
      required:
        - banned
      properties:
        banned:
          type: array
          items:
            $ref: '#/components/schemas/PersonView'

    BlockPerson:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: Block a person.
      required:
        - person_id
        - block
      properties:
        person_id:
          $ref: '#/components/schemas/PersonID'
        block:
          type: boolean

    BlockPersonResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: The response for a person block.
      required:
        - person_view
        - blocked
      properties:
        person_view:
          $ref: '#/components/schemas/PersonView'
        blocked:
          type: boolean

    GetCaptchaResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: A wrapper for the captcha response.
      properties:
        ok:
          $ref: '#/components/schemas/CaptchaResponse'
          description: Will be None if captchas are disabled.

    CaptchaResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: A captcha response.
      required:
        - png
        - wav
        - uuid
      properties:
        png:
          type: string
          description: A Base64 encoded png.
        wav:
          type: string
          description: A Base64 encoded wav audio.
        uuid:
          type: string
          description: The UUID for the captcha item.

    DeleteAccount:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: Delete your account.
      required:
        - password
        - delete_content
      properties:
        password:
          type: string
          format: password
        delete_content:
          type: boolean
          description: Will be None if captchas are disabled.

    PasswordReset:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: Reset your password via email.
      required:
        - email
      properties:
        email:
          type: string
          format: email

    PasswordChangeAfterReset:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: Change your password after receiving a reset request.
      required:
        - token
        - password
        - password_verify
      properties:
        token:
          type: string
          format: password
        password:
          type: string
          format: password
        password_verify:
          type: string
          format: password

    SaveUserSettings:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: Saves settings for your user.
      properties:
        show_nsfw:
          type: boolean
          description: Whether to show NSFW content.
        blur_nsfw:
          type: boolean
        auto_expand:
          type: boolean
        show_scores:
          type: boolean
          description: Show post and comment scores.
        theme:
          type: string
          description: Your user's theme.
        default_sort_type:
          $ref: '#/components/schemas/SortType'
        default_listing_type:
          $ref: '#/components/schemas/ListingType'
        interface_language:
          type: string
          description: The language of the lemmy interface
        avatar:
          type: string
          format: uri
          description: A URL for your avatar.
        banner:
          type: string
          format: uri
          description: A URL for your banner.
        display_name:
          type: string
          description: Your display name, which can contain strange characters, and does not need to be unique.
        email:
          type: string
          format: email
          description: Your email.
        bio:
          type: string
          description: Your bio / info, in markdown.
        matrix_user_id:
          type: string
          description: Your matrix user id.
          example: '@my_user:matrix.org'
        show_avatars:
          type: boolean
          description: Whether to show or hide avatars.
        send_notifications_to_email:
          type: boolean
          description: Sends notifications to your email.
        bot_account:
          type: boolean
          description: Whether this account is a bot account. Users can hide these accounts easily if they wish.
        show_bot_accounts:
          type: boolean
          description: Whether to show bot accounts.
        show_read_posts:
          type: boolean
          description: Whether to show read posts.
        discussion_languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageID'
        open_links_in_new_tab:
          type: boolean
          description: Open links in a new tab.
        infinite_scroll_enabled:
          type: boolean
          description: Enable infinite scroll
        post_listing_mode:
          $ref: '#/components/schemas/PostListingMode'
        enable_keyboard_navigation:
          type: boolean
          description: Whether to allow keyboard navigation (for browsing and interacting with posts and comments).
        enable_animated_images:
          type: boolean
          description: Whether user avatars or inline images in the UI that are gifs should be allowed to play or should be paused.
        collapse_bot_comments:
          type: boolean
          description: Whether to auto-collapse bot comments.

    ChangePassword:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: Changes your account password.
      required:
        - new_password
        - new_password_verify
        - old_password
      properties:
        new_password:
          type: string
          format: password
        new_password_verify:
          type: string
          format: password
        old_password:
          type: string
          format: password

    GetReportCountResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: A response for the number of reports.
      required:
        - comment_reports
        - post_reports
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        comment_reports:
          type: integer
          format: int64
        post_reports:
          type: integer
          format: int64
        private_message_reports:
          type: integer
          format: int64

    GetUnreadCountResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: A response containing counts for your notifications.
      required:
        - replies
        - mentions
        - private_messages
      properties:
        replies:
          type: integer
          format: int64
        mentions:
          type: integer
          format: int64
        private_messages:
          type: integer
          format: int64

    VerifyEmail:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: Verify your email.
      required:
        - token
      properties:
        token:
          type: string
          format: password

    AddAdmin:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: Adds an admin to a site.
      required:
        - person_id
        - added
      properties:
        person_id:
          $ref: '#/components/schemas/PersonID'
        added:
          type: boolean

    AddAdminResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      type: object
      description: The response of current admins.
      required:
        - admins
      properties:
        admins:
          type: array
          items:
            $ref: '#/components/schemas/PersonView'

    GetUnreadRegistrationApplicationCountResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      description: The count of unread registration applications.
      required:
        - registration_applications
      properties:
        registration_applications:
          type: integer
          format: int64

    ListRegistrationApplicationsResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      description: The response of current admins.
      required:
        - registration_applications
      properties:
        registration_applications:
          type: array
          items:
            $ref: '#/components/schemas/RegistrationApplicationView'

    RegistrationApplicationView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      type: object
      description: A registration application view.
      required:
        - registration_application
        - creator_local_user
        - creator
      properties:
        registration_application:
          $ref: '#/components/schemas/RegistrationApplication'
        creator_local_user:
          $ref: '#/components/schemas/LocalUser'
        creator:
          $ref: '#/components/schemas/Person'
        admin:
          $ref: '#/components/schemas/Person'

    RegistrationApplication:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/registration_application.rs
      type: object
      description: A registration application.
      required:
        - id
        - local_user_id
        - answer
        - published
      properties:
        id:
          type: integer
          format: int32
        local_user_id:
          $ref: '#/components/schemas/LocalUserID'
        answer:
          type: string
        admin_id:
          $ref: '#/components/schemas/PersonID'
        deny_reason:
          type: string
        published:
          type: string
          format: date-time

    ApproveRegistrationApplication:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      description: Approves a registration application.
      required:
        - id
        - approve
      properties:
        id:
          type: integer
          format: int32
        approve:
          type: boolean
        deny_reason:
          type: string

    RegistrationApplicationResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      description: The response of an action done to a registration application.
      required:
        - registration_application
      properties:
        registration_application:
          $ref: '#/components/schemas/RegistrationApplicationView'

    PurgePerson:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      description: Purges a person from the database. This will delete all content attached to that person.
      required:
        - person_id
      properties:
        person_id:
          $ref: '#/components/schemas/PersonID'
        reason:
          type: string

    PurgeCommunity:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      description: Purges a community from the database. This will delete all content attached to that community.
      required:
        - community_id
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        reason:
          type: string

    PurgePost:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      description: Purges a post from the database. This will delete all content attached to that post.
      required:
        - post_id
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        reason:
          type: string

    PurgeComment:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      description: Purges a comment from the database. This will delete all content attached to that comment.
      required:
        - comment_id
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentID'
        reason:
          type: string

    CreateCustomEmoji:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/custom_emoji.rs
      type: object
      description: Create a custom emoji.
      required:
        - category
        - shortcode
        - image_url
        - alt_text
        - keywords
      properties:
        category:
          type: string
        shortcode:
          type: string
        image_url:
          type: string
          format: uri
        alt_text:
          type: string
        keywords:
          type: array
          items:
            type: string

    CustomEmojiResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/custom_emoji.rs
      type: object
      description: A response for a custom emoji.
      required:
        - custom_emoji
      properties:
        custom_emoji:
          $ref: '#/components/schemas/CustomEmojiView'

    EditCustomEmoji:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/custom_emoji.rs
      type: object
      description: Edit a custom emoji.
      required:
        - id
        - category
        - image_url
        - alt_text
        - keywords
      properties:
        id:
          $ref: '#/components/schemas/CustomEmojiID'
        category:
          type: string
        image_url:
          type: string
          format: uri
        alt_text:
          type: string
        keywords:
          type: array
          items:
            type: string

    DeleteCustomEmoji:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/custom_emoji.rs
      type: object
      description: Delete a custom emoji.
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/CustomEmojiID'

    GetFederatedInstancesResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      description: A response of federated instances.
      required:
        - federated_instances
      properties:
        federated_instances:
          $ref: '#/components/schemas/FederatedInstances'

    FederatedInstances:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      description: A list of federated instances.
      required:
        - linked
        - allowed
        - blocked
      properties:
        linked:
          type: array
          items:
            $ref: '#/components/schemas/InstanceWithFederationState'
        allowed:
          type: array
          items:
            $ref: '#/components/schemas/InstanceWithFederationState'
        blocked:
          type: array
          items:
            $ref: '#/components/schemas/InstanceWithFederationState'

    InstanceWithFederationState:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      required:
        - id
        - domain
        - published
      properties:
        id:
          $ref: '#/components/schemas/InstanceID'
        domain:
          type: string
        published:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        software:
          type: string
        version:
          type: string
        federation_state:
          $ref: '#/components/schemas/ReadableFederationState'
          description: if federation to this instance is or was active, show state of outgoing federation to this instance

    ReadableFederationState:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      required:
        - instance_id
        - fail_count
      properties:
        instance_id:
          $ref: '#/components/schemas/InstanceID'
        last_successful_id:
          $ref: '#/components/schemas/ActivityID'
          description: the last successfully sent activity id
        last_successful_published_time:
          type: string
          format: date-time
        fail_count:
          type: integer
          format: int32
          description: how many failed attempts have been made to send the next activity.
        last_retry:
          type: string
          format: date-time
          description: timestamp of the last retry attempt (when the last failing activity was resent)
        next_retry:
          type: string
          format: date-time
          description: timestamp of the next retry attempt (null if fail count is 0)

    BlockInstance:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      description: Block an instance as user
      required:
        - instance_id
        - block
      properties:
        instance_id:
          $ref: '#/components/schemas/InstanceID'
        block:
          type: boolean

    BlockInstanceResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      type: object
      required:
        - blocked
      properties:
        blocked:
          type: boolean

    ListCommentLikesResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/comment.rs
      type: object
      description: The comment likes response
      required:
        - comment_likes
      properties:
        comment_likes:
          type: array
          items:
            $ref: '#/components/schemas/VoteView'

    ListPostLikesResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/comment.rs
      type: object
      description: The post likes response
      required:
        - post_likes
      properties:
        post_likes:
          type: array
          items:
            $ref: '#/components/schemas/VoteView'

    VoteView:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      type: object
      description: A vote view for checking a post or comments votes.
      required:
        - creator
        - score
      properties:
        creator:
          $ref: '#/components/schemas/Person'
        score:
          type: integer
          format: int32 # int16
          minimum: -32768
          maximum: 32767

    Image:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/routes/src/images.rs
      type: object
      required:
        - delete_token
        - file
      properties:
        delete_token:
          type: string
          example: '0eac5362-779f-4b35-827d-73dfb244c48e'
        file:
          type: string
          example: 'lkWZDRvugm.jpg'

    ImageUploadResponse:
      # https://github.com/LemmyNet/lemmy/blob/main/crates/routes/src/images.rs
      type: object
      required:
        - files
        - msg
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        msg:
          type: string
          enum:
            - ok
