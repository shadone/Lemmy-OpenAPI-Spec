openapi: '3.1.0'
info:
  title: Lemmy client API
  description: This is an unofficial OpenAPI spec for Lemmy client API.
  contact:
    url: https://github.com/shadone/Lemmy-OpenAPI-Spec
    email: denis@ddenis.info
  license:
    name: BSD 2-Clause
    identifier: BSD-2-Clause
  version: '0.19.1+1'

servers:
  - url: https://discuss.tchncs.de/api/v3
  - url: https://lemmy-0-19-1.ddenis.info/api/v3

tags:
  - name: Account
    description: Account management.
  - name: User
    description: Operations on users.
  - name: Post
    description: Operations on posts.
  - name: Comments
    description: Operations on comments.
  - name: Misc
    description: Miscellaneous operations.
  - name: Mod
    description: Moderator operations.

paths:
  /user:
    get:
      tags:
        - User
      summary: Get Person Details
      description: Fetch a person by their id.
      operationId: getPersonDetails
      security:
        - BearerAuth: []
        - {}
      parameters:
        - in: query
          name: person_id
          schema:
            $ref: '#/components/schemas/PersonID'
        - in: query
          name: username
          schema:
            type: string
        - in: query
          name: sort
          schema:
            $ref: '#/components/schemas/SortType'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - in: query
          name: community_id
          schema:
            $ref: '#/components/schemas/CommunityID'
        - in: query
          name: saved_only
          description: Whether to fetch only saved posts.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPersonDetailsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /user/mention:
    get:
      tags:
        - User
      summary: Get Person Mentions
      operationId: getPersonMentions
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: sort
          schema:
            $ref: '#/components/schemas/CommentSortType'
        - in: query
          name: unread_only
          schema:
            type: boolean
        - in: query
          name: comment_count
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPersonMentionsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /user/login:
    post:
      tags:
        - Account
        - User
      summary: Login
      description: Login with a user account.
      operationId: login
      requestBody:
        description: User credential
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /user/leave_admin:
    post:
      tags:
        - Account
        - User
      summary: Leave Admin
      description: Leave the Site admins.
      operationId: leaveAdmin
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSiteResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /user/totp/generate:
    post:
      tags:
        - Account
        - User
      summary: Generate TOTP Secret
      description: |
        Generate a TOTP / two-factor secret.

        Afterwards you need to call `/user/totp/update` with a valid token to enable it.
      operationId: generateTotpSecret
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateTotpSecretResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /user/export_settings:
    get:
      tags:
        - Account
        - User
      summary: Export Settings
      description: Export a backup of your user settings, including your saved content, followed communities, and blocks.
      operationId: exportSettings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'

  /user/import_settings:
    post:
      tags:
        - Account
        - User
      summary: Import Settings
      description: Import a backup of your user settings.
      operationId: importSettings
      security:
        - BearerAuth: []
      requestBody:
        description: Settings
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'

  /user/list_logins:
    get:
      tags:
        - Account
        - User
      summary: List Logins
      description: List login tokens for your user.
      operationId: listLogins
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoginToken'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'

  /user/validate_auth:
    get:
      tags:
        - Account
        - User
      summary: Validate Auth
      description: Returns an error message if your auth token is invalid
      operationId: validateAuth
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'

  /user/totp/update:
    post:
      tags:
        - Account
        - User
      summary: Update TOTP
      description: |
        Enable / Disable TOTP / two-factor authentication.

        To enable, you need to first call `/user/totp/generate` and then pass a valid token to this.

        Disabling is only possible if 2FA was previously enabled. Again it is necessary to pass a valid token.
      operationId: validateAuth
      security:
        - BearerAuth: []
      requestBody:
        description: Update TOTP
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTotp'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTotpResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'

  /modlog:
    get:
      tags:
        - Mod
      summary: Get Modlog
      description: Fetches the modlog
      operationId: validateAuth
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: mod_person_id
          schema:
            $ref: '#/components/schemas/PersonID'
        - in: query
          name: community_id
          schema:
            $ref: '#/components/schemas/CommunityID'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - in: query
          name: type_
          schema:
            $ref: '#/components/schemas/ModlogActionType'
        - in: query
          name: other_person_id
          schema:
            $ref: '#/components/schemas/PersonID'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModlogResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'

  /search:
    get:
      tags:
        - Misc
      summary: Search
      description: Search through Lemmy
      operationId: search
      security:
        - BearerAuth: []
        - {}
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
        - in: query
          name: community_id
          schema:
            $ref: '#/components/schemas/CommunityID'
        - in: query
          name: community_name
          schema:
            type: string
        - in: query
          name: creator_id
          schema:
            $ref: '#/components/schemas/PersonID'
        - in: query
          name: type_
          schema:
            $ref: '#/components/schemas/SearchType'
        - in: query
          name: sort
          schema:
            $ref: '#/components/schemas/SortType'
        - in: query
          name: listing_type
          schema:
            $ref: '#/components/schemas/ListingType'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'

  /community:
    post:
      tags:
        - Community
      summary: Create Community
      description: Create a new community.
      operationId: createCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Create Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
    get:
      tags:
        - Community
      summary: Get Community
      description: Get / fetch a community.
      operationId: getCommunity
      security:
        - BearerAuth: []
        - {}
      parameters:
        - in: query
          name: id
          schema:
            $ref: '#/components/schemas/CommunityID'
        - in: query
          name: name
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
    put:
      tags:
        - Community
      summary: Edit Community
      description: Edit a community.
      operationId: editCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Edit Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'

  /community/list:
    get:
      tags:
        - Community
      summary: List Communities
      description: List communities, with various filters.
      operationId: listCommunities
      security:
        - BearerAuth: []
        - {}
      parameters:
        - in: query
          name: type_
          schema:
            $ref: '#/components/schemas/ListingType'
        - in: query
          name: sort
          schema:
            $ref: '#/components/schemas/SortType'
        - in: query
          name: show_nsfw
          schema:
            type: boolean
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCommunitiesResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /community/follow:
    post:
      tags:
        - Community
      summary: Follow Community
      description: Follow / subscribe to a community.
      operationId: followCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Follow Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /community/block:
    post:
      tags:
        - Community
      summary: Block Community
      description: Block a community.
      operationId: blockCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Block Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockCommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /community/delete:
    post:
      tags:
        - Community
      summary: Delete Community
      description: Delete a community.
      operationId: deleteCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Delete Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /community/hide:
    put:
      tags:
        - Community
        - Admin
      summary: Hide Community
      description: Hide a community from public / "All" view. Admins only.
      operationId: hideCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Hide Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HideCommunity'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /community/remove:
    post:
      tags:
        - Community
        - Mod
      summary: Remove Community
      description: A moderator remove for a community.
      operationId: removeCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Remove Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /community/transfer:
    post:
      tags:
        - Community
        - Mod
      summary: Transfer Community
      description: Transfer your community to an existing moderator.
      operationId: transferCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Transfer Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /community/ban_user:
    post:
      tags:
        - Community
        - Mod
      summary: Ban From Community
      description: Ban a user from a community.
      operationId: banUserFromCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Ban From Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BanFromCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BanFromCommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /community/mod:
    post:
      tags:
        - Community
        - Mod
      summary: Add Mod to Community
      description: Add a moderator to your community.
      operationId: addModToCommunity
      security:
        - BearerAuth: []
      requestBody:
        description: Add Mod To Community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddModToCommunity'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddModToCommunityResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /post:
    post:
      tags:
        - Post
      summary: Create Post
      description: Create a post.
      operationId: createPost
      security:
        - BearerAuth: []
      requestBody:
        description: Create Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePost'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
    get:
      tags:
        - Post
      summary: Get Post
      description: Fetch a post by its id.
      operationId: getPost
      security:
        - BearerAuth: []
        - {}
      parameters:
        - in: query
          name: id
          schema:
            $ref: '#/components/schemas/PostID'
        - in: query
          name: comment_id
          description: The comment identifier to fetch.
          schema:
            $ref: '#/components/schemas/CommentID'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
    put:
      tags:
        - Post
      summary: Edit Post
      description: Edit a post.
      operationId: editPost
      security:
        - BearerAuth: []
      requestBody:
        description: Edit Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditPost'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /post/delete:
    post:
      tags:
        - Post
      summary: Delete Post
      description: Delete a post.
      operationId: deletePost
      security:
        - BearerAuth: []
      requestBody:
        description: Delete Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePost'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /post/remove:
    post:
      tags:
        - Mod
      summary: Remove Post
      description: A moderator remove for a post.
      operationId: removePost
      security:
        - BearerAuth: []
      requestBody:
        description: Remove Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemovePost'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /post/mark_as_read:
    post:
      tags:
        - Post
      summary: Mark Post as Read
      description: Mark a post as read.
      operationId: markPostAsRead
      security:
        - BearerAuth: []
      requestBody:
        description: Mark Post as Read
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkPostAsRead'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /post/lock:
    post:
      tags:
        - Mod
      summary: Lock Post
      description: A moderator can lock a post (i.e. disable new comments).
      operationId: lockPost
      security:
        - BearerAuth: []
      requestBody:
        description: Mark Post as Read
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockPost'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /post/feature:
    post:
      tags:
        - Mod
      summary: Feature Post
      description: A moderator can feature a community post (i.e. stick it to the top of a community).
      operationId: featurePost
      security:
        - BearerAuth: []
      requestBody:
        description: Feature Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeaturePost'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /post/list:
    get:
      tags:
        - Post
      summary: Get Posts
      description: List posts with various filters.
      operationId: getPosts
      security:
        - BearerAuth: []
        - {}
      parameters:
        - in: query
          name: type_
          description: The type of listing to fetch.
          schema:
            $ref: '#/components/schemas/ListingType'
        - in: query
          name: sort
          description: Specifies how the posts in response should be ordered.
          schema:
            $ref: '#/components/schemas/SortType'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - in: query
          name: community_id
          description: The community identifier to fetch posts from.
          schema:
            $ref: '#/components/schemas/CommunityID'
        - in: query
          name: community_name
          description: The community name to fetch posts from.
          schema:
            type: string
        - in: query
          name: saved_only
          description: Whether to fetch only saved posts.
          schema:
            type: boolean
        - in: query
          name: liked_only
          schema:
            type: boolean
        - in: query
          name: disliked_only
          schema:
            type: boolean
        - in: query
          name: page_cursor
          schema:
            $ref: '#/components/schemas/PaginationCursor'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /post/like:
    post:
      tags:
        - Post
      summary: Like Post
      description: Like / vote on a post
      operationId: likePost
      security:
        - BearerAuth: []
      requestBody:
        description: Like Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostLike'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /post/save:
    put:
      tags:
        - Post
      summary: Save Post
      description: Save a post
      operationId: savePost
      security:
        - BearerAuth: []
      requestBody:
        description: Save Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavePost'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /post/report:
    put:
      tags:
        - Post
      summary: Report Post
      description: Report a post.
      operationId: reportPost
      security:
        - BearerAuth: []
      requestBody:
        description: Report Post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostReport'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReportResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /post/report/resolve:
    put:
      tags:
        - Mod
      summary: Resolve Post Report
      description: Resolve a post report. Only a mod can do this.
      operationId: resolvePortReport
      security:
        - BearerAuth: []
      requestBody:
        description: Resolve Post Report
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolvePostReport'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReportResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /post/report/list:
    get:
      tags:
        - Mod
      summary: List Post Reports
      description: List post reports.
      operationId: listPortReports
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: unresolved_only
          schema:
            type: boolean
        - in: query
          name: community_id
          schema:
            $ref: '#/components/schemas/CommunityID'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPostReportsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /comment/list:
    get:
      tags:
        - Comments
      summary: Get Comments
      operationId: getComments
      security:
        - BearerAuth: []
        - {}
      parameters:
        - in: query
          name: type_
          description: |
            Specify the type of listing to fetch all comments in a given listing.
            E.g. fetch all comments for Subscribed communities.
          schema:
            $ref: '#/components/schemas/ListingType'
        - in: query
          name: sort
          description: Specifies how the comments in response should be ordered.
          schema:
            $ref: '#/components/schemas/SortType'
        - in: query
          name: max_depth
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - in: query
          name: community_id
          description: The community identifier to fetch comments from.
          schema:
            $ref: '#/components/schemas/CommunityID'
        - in: query
          name: community_name
          description: The community name to fetch comments from.
          schema:
            type: string
        - in: query
          name: post_id
          description: The post identifier to fetch comments from.
          schema:
            $ref: '#/components/schemas/PostID'
        - in: query
          name: parent_id
          schema:
            $ref: '#/components/schemas/CommentID'
        - in: query
          name: saved_only
          description: Whether to fetch only saved comments.
          schema:
            type: boolean
        - in: query
          name: liked_only
          schema:
            type: boolean
        - in: query
          name: disliked_only
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /site:
    get:
      tags:
        - Site
      summary: Get Site
      description: Gets the site, and your user data.
      operationId: getSite
      security:
        - BearerAuth: []
        - {}
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSiteResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
    post:
      tags:
        - Site
      summary: Create Site
      description: Create your site
      operationId: createSite
      security:
        - BearerAuth: []
      requestBody:
        description: Create Site
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSite'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
    put:
      tags:
        - Site
      summary: Edit Site
      description: Edit your site
      operationId: editSite
      security:
        - BearerAuth: []
      requestBody:
        description: Edit Site
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditSite'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /resolve_object:
    get:
      tags:
        - Misc
      summary: Resolve Object
      description: |
        Resolves an ActivityPub object.

        If user is authenticated, remote lookups are allowed, else only allows local search.
      operationId: resolveObject
      security:
        - BearerAuth: []
        - {}
      parameters:
        - in: query
          name: q
          schema:
            type: string
            description: Search query.
            required: true
            examples:
              LemmyUserSyntax:
                value: '@ruud@lemmy.world'
                summary: Resolve user by Lemmy shorthand syntax.
              ActivityPubObject:
                value: 'https://lemmy.world/u/ruud'
                summary: Resolve an ActivityPub actor.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResolveObjectResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    ErrorResponse:
      description: An error has occurred.
      content: 
        application/json:
          schema: 
            type: array
            items:
              $ref: '#/components/schemas/ErrorResponse'
    SuccessResponse:
      content: 
        application/json:
          schema: 
            type: object
            required:
              - success
            properties:
              success:
                type: boolean

  parameters:
    page:
      in: query
      name: page
      summary: Page number
      description: |
        Pagination. The page number to fetch the results. This allows to fetch large data sets one page at a time.
        The first page is number 1.
      schema:
        type: integer
        format: int64
    limit:
      in: query
      name: limit
      summary: Desired number of results per page
      description: |
        Pagination. Specifies the maximum number of results per page.
        Note: This is server specific but in regular Lemmy install the default value is 10 and max is 50.
      schema:
        type: integer
        format: int64

  schemas:
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
        message:
          type: string
    MyVote:
      type: integer
      format: int32 # int16
      minimum: -1
      maximum: 1
      description: |
        Users' vote status.

        Possible values:
          - 0: Neutral (not voted)
          - 1: Upvoted
          - -1: Downvoted

      example: 1

    PostID:
      type: integer
      format: int32
      summary: Post identifier
      description: The identifier is local to this instance.
      example: 1234
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs
    
    CommentID:
      type: integer
      format: int32
      summary: Comment identifier
      description: The identifier is local to this instance.
      example: 1234
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs

    PersonID:
      type: integer
      format: int32
      summary: Person identifier
      description: The identifier is local to this instance.
      example: 1234
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs

    CommunityID:
      type: integer
      format: int32
      summary: Community identifier
      description: The identifier is local to this instance.
      example: 1234
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs

    LanguageID:
      type: integer
      format: int32
      summary: Language identifier
      description: The identifier is local to this instance.
      example: 1234
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs

    InstanceID:
      type: integer
      format: int32
      summary: Instance identifier
      description: The identifier is local to this instance.
      example: 1234
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs

    PersonMentionID:
      type: integer
      format: int32
      summary: Person Mention identifier
      description: The identifier is local to this instance.
      example: 1234
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs

    SiteID:
      type: integer
      format: int32
      summary: Site identifier
      description: The identifier is local to this instance.
      example: 1234
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs

    LocalSiteID:
      type: integer
      format: int32
      summary: Local Site identifier
      description: The identifier is local to this instance.
      example: 1234
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs

    LocalUserID:
      type: integer
      format: int32
      summary: Local User identifier
      description: The identifier is local to this instance.
      example: 1234
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs

    CustomEmojiID:
      type: integer
      format: int32
      summary: Custom Emoji identifier
      description: The identifier is local to this instance.
      example: 1234
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs

    PostReportID:
      type: integer
      format: int32
      summary: The post report id.
      description: The identifier is local to this instance.
      example: 1234
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/newtypes.rs


    LoginRequest:
      type: object
      required:
        - username_or_email
        - password
      properties:
        username_or_email:
          type: string
          example: 'foobar@example.org'
        password:
          type: string
          format: password
          example: 'mys3cur3p4$$w0rd'
        totp_2fa_token:
          type: string
    
    LoginResponse:
      type: object
      required:
        - registration_created
        - verify_email_sent
      properties:
        jwt:
          type: string
        registration_created:
          type: boolean
        verify_email_sent:
          type: boolean
    
    GetPostResponse:
      type: object
      required:
        - post_view
        - community_view
        - moderators
        - cross_posts
      properties:
        post_view:
          $ref: '#/components/schemas/PostView'
        community_view:
          $ref: '#/components/schemas/CommunityView'
        moderators:
          type: array
          items:
            $ref: '#/components/schemas/CommunityModeratorView'
        cross_posts:
          type: array
          items:
            $ref: '#/components/schemas/PostView'
          description: A list of cross-posts, or other times / communities this link has been posted to.

    PostView:
      type: object
      required:
        - post
        - creator
        - community
        - creator_banned_from_community
        - creator_is_moderator
        - creator_is_admin
        - counts
        - subscribed
        - saved
        - read
        - creator_blocked
        - unread_comments
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      properties:
        post:
          description: The post content.
          $ref: '#/components/schemas/Post'
        creator:
          description: Author of the post.
          $ref: '#/components/schemas/Person'
        community:
          description: Community to which the post was submitted.
          $ref: '#/components/schemas/Community'
        creator_banned_from_community:
          type: boolean
          description: Specifies whether the post author is banned from the community.
        creator_is_moderator:
          type: boolean
        creator_is_admin:
          type: boolean
        counts:
          description: Stats about the post.
          $ref: '#/components/schemas/PostAggregates'
        subscribed:
          $ref: '#/components/schemas/SubscribedType'
        saved:
          type: boolean
          description: Specifies whether the user marked the post as saved.
        read:
          type: boolean
          description: Specifies whether the user read the post.
        creator_blocked:
          type: boolean
          description: Specifies whether the user blocked the post author.
        my_vote:
          $ref: '#/components/schemas/MyVote'
        unread_comments:
          type: integer
          format: int64
          description: The number of unread comments in the post for the user.

    Post:
      type: object
      required:
        - id
        - name
        - creator_id
        - community_id
        - removed
        - locked
        - published
        - deleted
        - nsfw
        - ap_id
        - local
        - language_id
        - featured_community
        - featured_local
      properties:
        id:
          description: Post identifier
          $ref: '#/components/schemas/PostID'
        name:
          type: string
          description: The title of the post, in markdown.
        url:
          type: string
          format: uri
          description: An optional link / url for the post.
        body:
          type: string
          description: An optional post body, in markdown.
        creator_id:
          $ref: '#/components/schemas/PersonID'
          description: Post author identifier. The identifier is local to this instance.
        community_id:
          $ref: '#/components/schemas/CommunityID'
          description: Community identifier. The identifier is local to this instance.
        removed:
          type: boolean
          description: Whether the post is removed.
        locked:
          type: boolean
          description: Whether the post is locked.
        published:
          type: string
          format: date-time
          description: The date this post was published.
        updated:
          type: string
          format: date-time
          description: The date this post was last updated.
        deleted:
          type: boolean
          description: Whether the post is deleted.
        nsfw:
          type: boolean
          description: Whether the post is NSFW.
        embed_title:
          type: string
          description: A title for the link.
        embed_description:
          type: string
          description: A description for the link.
        thumbnail_url:
          type: string
          format: uri
          description: A thumbnail picture url.
        ap_id:
          type: string
          format: uri
          description: The federated activity id / ap_id.
          example: https://sh.itjust.works/post/109799
        local:
          type: boolean
          description: Whether the post is local.
        embed_video_url:
          type: string
          format: uri
          description: A video url for the link.
        language_id:
          $ref: '#/components/schemas/LanguageID'
          description: The language of the post.
        featured_community:
          type: boolean
          description: Whether the post is featured to its community.
        featured_local:
          type: boolean
          description: Whether the post is featured to its site.

    Community:
      type: object
      required:
        - id
        - name
        - title
        - removed
        - published
        - deleted
        - nsfw
        - actor_id
        - local
        - hidden
        - posting_restricted_to_mods
        - instance_id
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/community.rs
      properties:
        id:
          description: Community identifier
          $ref: '#/components/schemas/CommunityID'
        name:
          type: string
          description: The unique name of the community.
          example: mylittlepony
        title:
          type: string
          description: A longer title, that can contain other characters, and doesn't have to be unique.
          example: 'MLP: Friendship is Magic Reddit Community'
        description:
          type: string
          description: A sidebar / markdown description.
        removed:
          type: boolean
          description: Whether the community is removed by a mod.
        published:
          type: string
          format: date-time
          description: The date community was created.
        updated:
          type: string
          format: date-time
          description: The date community info was last updated.
        deleted:
          type: boolean
          description: Whether the community has been deleted by its creator.
        nsfw:
          type: boolean
          description: Whether it is an NSFW community.
        actor_id:
          type: string
          format: uri
          description: The federated actor_id.
          example: https://lemmit.online/c/mylittlepony
        local:
          type: boolean
          description: Whether the community is local.
        icon:
          type: string
          format: uri
          description: A URL for an icon.
        banner:
          type: string
          format: uri
          description: A URL for a banner.
        hidden:
          type: boolean
          description: Whether the community is hidden.
        posting_restricted_to_mods:
          type: boolean
          description: Whether posting is restricted to mods only.
        instance_id:
          $ref: '#/components/schemas/InstanceID'
          
    Person:
      type: object
      required:
        - id
        - name
        - banned
        - published
        - actor_id
        - local
        - deleted
        - bot_account
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/person.rs
      properties:
        id:
          description: Person identifier
          $ref: '#/components/schemas/PersonID'
        name:
          type: string
          description: Username (aka nickname aka short users' name).
          example: helloworld
        display_name:
          type: string
          description: A display name for the user.
          example: Hello World!
        avatar:
          type: string
          format: uri
          description: A URL for an avatar.
        banned:
          type: boolean
          description: Whether the person is banned.
        published:
          type: string
          format: date-time
          description: The account creation date.
        updated:
          type: string
          format: date-time
        actor_id:
          type: string
          format: uri
          description: The federated actor_id.
          example: https://discuss.tchncs.de/u/milan
        bio:
          type: string
          description: An optional bio, in markdown.
        local:
          type: boolean
          description: Whether the person is local to our site.
        banner:
          type: string
          format: uri
          description: A URL for a banner.
        deleted:
          type: boolean
          description: Whether the person is deleted.
        matrix_user_id:
          type: string
          description: A matrix id, usually given an @person:matrix.org
          example: '@person:matrix.org'
        bot_account:
          type: boolean
          description: Whether the person is a bot account.
        ban_expires:
          type: string
          format: date-time
          description: When their ban, if it exists, expires, if at all.
        instance_id:
          description: Which instance the person belongs to.
          $ref: '#/components/schemas/InstanceID'

    PostAggregates:
      type: object
      required:
        - post_id
        - comments
        - score
        - upvotes
        - downvotes
        - published
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/aggregates/structs.rs
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        comments:
          type: integer
          format: int64
          description: Number of comments in the post.
        score:
          type: integer
          format: int64
          description: Overall score of the post.
        upvotes:
          type: integer
          format: int64
          description: Number of upvotes.
        downvotes:
          type: integer
          format: int64
          description: Number of downvotes.
        published:
          type: string
          format: date-time
          description: The timestamp when the post was published.

    SubscribedType:
      type: string
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      description: A type / status for a community subscribe.
      enum:
        - Subscribed
        - NotSubscribed
        - Pending

    RegistrationMode:
      type: string
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      enum:
        - Closed
        - RequireApplication
        - Open

    ModlogActionType:
      type: string
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      description: A list of possible types for the various modlog actions.
      enum:
        - All
        - ModRemovePost
        - ModLockPost
        - ModFeaturePost
        - ModRemoveComment
        - ModRemoveCommunity
        - ModBanFromCommunity
        - ModAddCommunity
        - ModTransferCommunity
        - ModAdd
        - ModBan
        - ModHideCommunity
        - AdminPurgePerson
        - AdminPurgeCommunity
        - AdminPurgePost
        - AdminPurgeComment

    SearchType:
      type: string
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      description: The type of content returned from a search.
      enum:
        - All
        - Comments
        - Posts
        - Communities
        - Users
        - Url

    PostFeatureType:
      type: string
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      description: The feature type for a post
      enum:
        # Features to the top of your site.
        - Local
        # Features to the top of the community.
        - Community

    Language:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/language.rs
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/LanguageID'
        code:
          type: string
          description: |
            Language code.

            Two letter ISO639-1 language code.

            Or an additional value `und` for Undefined language.
          example: sv
        name:
          type: string
          description: Language name.
          example: Svenska

    CommunityView:
      type: object
      required:
        - community
        - subscribed
        - blocked
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_actor/src/structs.rs
      properties:
        community:
          $ref: '#/components/schemas/Community'
        subscribed:
          $ref: '#/components/schemas/SubscribedType'
        blocked:
          type: boolean
        counts:
          $ref: '#/components/schemas/CommunityAggregates'

    CommunityAggregates:
      type: object
      required:
        - community_id
        - subscribers
        - posts
        - comments
        - published
        - users_active_day
        - users_active_week
        - users_active_month
        - users_active_half_year
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/aggregates/structs.rs
      description: Aggregate data for a community.
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        subscribers:
          type: integer
          format: int64
        posts:
          type: integer
          format: int64
        comments:
          type: integer
          format: int64
        published:
          type: string
          format: date-time
        users_active_day:
          type: integer
          format: int64
          description: The number of users with any activity in the last day.
        users_active_week:
          type: integer
          format: int64
          description: The number of users with any activity in the last week.
        users_active_month:
          type: integer
          format: int64
          description: The number of users with any activity in the last month.
        users_active_half_year:
          type: integer
          format: int64
          description: The number of users with any activity in the last 6 months.

    CommunityModeratorView:
      type: object
      required:
        - community
        - moderator
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_actor/src/structs.rs
      description: A community moderator.
      properties:
        community:
          $ref: '#/components/schemas/Community'
        moderator:
          $ref: '#/components/schemas/Person'

    PaginationCursor:
      type: string
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs

    ListingType:
      type: string
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      enum:
        # Content from your own site, as well as all connected / federated sites.
        - All
        # Content from your site only.
        - Local
        # Content only from communities you've subscribed to.
        - Subscribed
        # Content that you can moderate (because you are a moderator of the community it is posted to).
        - ModeratorView

    SortType:
      type: string
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      enum:
        - Active
        - Hot
        - New
        - Old
        - TopSixHour
        - TopTwelveHour
        - TopDay
        - TopWeek
        - TopMonth
        - TopYear
        - TopAll
        - MostComments
        - NewComments
        - TopThreeMonths
        - TopSixMonths
        - TopNineMonths
        - Controversial
        - Scaled

    CommentSortType:
      type: string
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      enum:
        - Hot
        - Top
        - New
        - Old
        - Controversial

    PostListingMode:
      type: string
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/lib.rs
      enum:
        # A compact, list-type view.
        - List
        # A larger card-type view.
        - Card
        # A smaller card-type view, usually with images as thumbnails
        - SmallCard

    GetPostsResponse:
      type: object
      required:
        - posts
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostView'
        next_page:
          $ref: '#/components/schemas/PaginationCursor'

    GetCommentsResponse:
      type: object
      required:
        - comments
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentView'

    CommentView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      required:
        - comment
        - creator
        - post
        - community
        - counts
        - creator_banned_from_community
        - creator_is_moderator
        - creator_is_admin
        - subscribed
        - saved
        - creator_blocked
      properties:
        comment:
          description: The comment content.
          $ref: '#/components/schemas/Comment'
        creator:
          description: Author of the comment.
          $ref: '#/components/schemas/Person'
        post:
          description: The post this comment belongs to.
          $ref: '#/components/schemas/Post'
        community:
          description: Community to which the comment was submitted.
          $ref: '#/components/schemas/Community'
        counts:
          description: Stats about the comment.
          $ref: '#/components/schemas/CommentAggregates'
        creator_banned_from_community:
          type: boolean
          description: Specifies whether the comment author is banned from the community.
        creator_is_moderator:
          type: boolean
        creator_is_admin:
          type: boolean
        subscribed:
          $ref: '#/components/schemas/SubscribedType'
        saved:
          type: boolean
          description: Specifies whether the user marked the comment as saved.
        creator_blocked:
          type: boolean
          description: Specifies whether the user blocked the comment author.
        my_vote:
          $ref: '#/components/schemas/MyVote'

    Comment:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/comment.rs
      required:
        - id
        - creator_id
        - post_id
        - content
        - removed
        - published
        - deleted
        - ap_id
        - local
        - path
        - distinguished
        - language_id
      properties:
        id:
          description: Comment identifier. The identifier is local to this instance.
          $ref: '#/components/schemas/CommentID'
        creator_id:
          description: Comment author identifier.
          $ref: '#/components/schemas/PersonID'
        post_id:
          description: Post identifier that the comment belongs to.
          $ref: '#/components/schemas/PostID'
        content:
          type: string
          description: The content of the comment, in markdown.
        removed:
          type: boolean
          description: Whether the comment is removed.
        published:
          type: string
          format: date-time
          description: The date this comment was published.
        updated:
          type: string
          format: date-time
          description: The date this comment was last updated.
        deleted:
          type: boolean
          description: Whether the comment is deleted.
        ap_id:
          type: string
          format: uri
          description: The federated activity id / ap_id.
          example: https://lemmy.world/comment/316303
        local:
          type: boolean
          description: Whether the comment is local.
        path:
          type: string
          description: |
            Specifies the path to this comment in a tree of comments.
            Represented as dot separated list of comment identifiers. The path starts with "0" representing the root.
          example: '0.219355.219732.225923'
        distinguished:
          type: boolean
        language_id:
          description: The language of the post.
          $ref: '#/components/schemas/LanguageID'

    CommentAggregates:
      type: object
      required:
        - comment_id
        - score
        - upvotes
        - downvotes
        - published
        - child_count
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/aggregates/structs.rs
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentID'
        score:
          type: integer
          format: int64
          description: Overall score of the comment.
        upvotes:
          type: integer
          format: int64
          description: Number of upvotes.
        downvotes:
          type: integer
          format: int64
          description: Number of downvotes.
        published:
          type: string
          format: date-time
          description: The timestamp when the comment was published.
        child_count:
          type: integer
          format: int32
          description: The total number of children in this comment branch.

    GetPersonDetailsResponse:
      type: object
      required:
        - person_view
        - comments
        - posts
        - moderates
      properties:
        person_view:
          $ref: '#/components/schemas/PersonView'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentView'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostView'
        moderates:
          type: array
          items:
            $ref: '#/components/schemas/CommunityModeratorView'

    PersonView:
      type: object
      required:
        - person
        - counts
        - is_admin
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_actor/src/structs.rs
      properties:
        person:
          $ref: '#/components/schemas/Person'
        counts:
          $ref: '#/components/schemas/PersonAggregates'
        is_admin:
          type: boolean
          description: Whether the person is an admin.

    PersonAggregates:
      type: object
      required:
        - person_id
        - post_count
        - comment_count
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/aggregates/structs.rs
      properties:
        person_id:
          $ref: '#/components/schemas/PersonID'
        post_count:
          type: integer
          format: int64
        comment_count:
          type: integer
          format: int64

    GetPersonMentionsResponse:
      type: object
      required:
        - mentions
      properties:
        mentions:
          type: array
          items:
            $ref: '#/components/schemas/PersonMentionView'

    PersonMentionView:
      type: object
      required:
        - person_mention
        - comment
        - creator
        - post
        - community
        - recipient
        - counts
        - creator_banned_from_community
        - creator_is_moderator
        - creator_is_admin
        - subscribed
        - saved
        - creator_blocked
      properties:
        person_mention:
          $ref: '#/components/schemas/PersonMention'
        comment:
          $ref: '#/components/schemas/Comment'
        creator:
          $ref: '#/components/schemas/Person'
        post:
          $ref: '#/components/schemas/Post'
        community:
          $ref: '#/components/schemas/Community'
        recipient:
          $ref: '#/components/schemas/Person'
        counts:
          $ref: '#/components/schemas/CommentAggregates'
        creator_banned_from_community:
          type: boolean
        creator_is_moderator:
          type: boolean
        creator_is_admin:
          type: boolean
        subscribed:
          $ref: '#/components/schemas/SubscribedType'
        saved:
          type: boolean
        creator_blocked:
          type: boolean
        my_vote:
          $ref: '#/components/schemas/MyVote'

    PersonMention:
      type: object
      required:
        - id
        - recipient_id
        - comment_id
        - read
        - published
      properties:
        id:
          $ref: '#/components/schemas/PersonMentionID'
        recipient_id:
          $ref: '#/components/schemas/PersonID'
        comment_id:
          $ref: '#/components/schemas/CommentID'
        read:
          type: boolean
        published:
          type: string
          format: date-time

    GetSiteResponse:
      type: object
      required:
        - site_view
        - admins
        - version
        - all_languages
        - discussion_languages
      properties:
        site_view:
          $ref: '#/components/schemas/SiteView'
        admins:
          type: array
          items:
            $ref: '#/components/schemas/PersonView'
        version:
          type: string
        my_user:
          $ref: '#/components/schemas/MyUserInfo'
        all_languages:
          type: array
          items:
            $ref: '#/components/schemas/Language'
        discussion_languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageID'
        taglines:
          type: array
          items:
            $ref: '#/components/schemas/Tagline'
        custom_emojis:
          type: array
          items:
            $ref: '#/components/schemas/CustomEmojiView'

    SiteView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      required:
        - site
        - local_site
        - local_site_rate_limit
        - counts
      properties:
        site:
          $ref: '#/components/schemas/Site'
        local_site:
          $ref: '#/components/schemas/LocalSite'
        local_site_rate_limit:
          $ref: '#/components/schemas/LocalSiteRateLimit'
        counts:
          $ref: '#/components/schemas/SiteAggregates'

    Site:
      type: object
      required:
        - id
        - name
        - published
        - actor_id
        - last_refreshed_at
        - inbox_url
        - public_key
        - instance_id
      properties:
        id:
          $ref: '#/components/schemas/SiteID'
        name:
          type: string
        sidebar:
          type: string
        published:
          type: string
          format: date-time
          description: The date site info was published.
        updated:
          type: string
          format: date-time
          description: The date this site info was last updated.
        icon:
          type: string
          format: uri
        banner:
          type: string
          format: uri
        description:
          type: string
        actor_id:
          type: string
          format: uri
          description: The federated actor_id.
          example: https://discuss.tchncs.de/
        last_refreshed_at:
          type: string
          format: date-time
        inbox_url:
          type: string
          format: uri
        public_key:
          type: string
        instance_id:
          $ref: '#/components/schemas/InstanceID'

    LocalSite:
      type: object
      required:
        - id
        - site_id
        - site_setup
        - enable_downvotes
        - enable_nsfw
        - community_creation_admin_only
        - require_email_verification
        - private_instance
        - default_theme
        - default_post_listing_type
        - hide_modlog_mod_names
        - application_email_admins
        - actor_name_max_length
        - federation_enabled
        - captcha_enabled
        - captcha_difficulty
        - published
        - registration_mode
        - reports_email_admins
        - federation_signed_fetch
      properties:
        id:
          $ref: '#/components/schemas/LocalSiteID'
        site_id:
          $ref: '#/components/schemas/SiteID'
        site_setup:
          type: boolean
          description: True if the site is set up.
        enable_downvotes:
          type: boolean
          description: Whether downvotes are enabled.
        enable_nsfw:
          type: boolean
          description: Whether NSFW is enabled.
        community_creation_admin_only:
          type: boolean
          description: Whether only admins can create communities.
        require_email_verification:
          type: boolean
          description: Whether emails are required.
        application_question:
          type: boolean
          description: An optional registration application questionnaire in markdown.
        private_instance:
          type: boolean
          description: Whether the instance is private or public.
        default_theme:
          type: boolean
          description: The default front-end theme.
        default_post_listing_type:
          $ref: '#/components/schemas/ListingType'
        legal_information:
          type: boolean
          description: An optional legal disclaimer page.
        hide_modlog_mod_names:
          type: boolean
        application_email_admins:
          type: boolean
        slur_filter_regex:
          type: string
          description: An optional regex to filter words.
        actor_name_max_length:
          type: integer
          format: int32
          description: The max actor name length.
        federation_enabled:
          type: boolean
          description: Whether federation is enabled.
        captcha_enabled:
          type: boolean
          description: Whether captcha is enabled.
        captcha_difficulty:
          type: string
          description: The captcha difficulty.
        published:
          type: string
          format: date-time
          description: The date this site info was published.
        updated:
          type: string
          format: date-time
          description: The date this site info was last updated.
        registration_mode:
          $ref: '#/components/schemas/RegistrationMode'
        reports_email_admins:
          type: boolean
          description: Whether to email admins on new reports.
        federation_signed_fetch:
          type: boolean
          description: Whether to sign outgoing Activitypub fetches with private key of local instance. Some Fediverse instances and platforms require this.

    LocalSiteRateLimit:
      type: object
      description: Rate limits for your site. Given in count / length of time.
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/local_site_rate_limit.rs
      required:
        - local_site_id
        - message
        - message_per_second
        - post
        - post_per_second
        - register
        - register_per_second
        - image
        - image_per_second
        - comment
        - comment_per_second
        - search
        - search_per_second
        - published
        - import_user_settings
        - import_user_settings_per_second
      properties:
        local_site_id:
          $ref: '#/components/schemas/LocalSiteID'
        message:
          type: integer
          format: int32
        message_per_second:
          type: integer
          format: int32
        post:
          type: integer
          format: int32
        post_per_second:
          type: integer
          format: int32
        register:
          type: integer
          format: int32
        register_per_second:
          type: integer
          format: int32
        image:
          type: integer
          format: int32
        image_per_second:
          type: integer
          format: int32
        comment:
          type: integer
          format: int32
        comment_per_second:
          type: integer
          format: int32
        search:
          type: integer
          format: int32
        search_per_second:
          type: integer
          format: int32
        published:
          type: string
          format: date-time
          description: The date this site info was published.
        updated:
          type: string
          format: date-time
          description: The date this site info was last updated.
        import_user_settings:
          type: integer
          format: int32
        import_user_settings_per_second:
          type: integer
          format: int32

    SiteAggregates:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/aggregates/structs.rs
      required:
        - site_id
        - users
        - posts
        - comments
        - communities
        - users_active_day
        - users_active_week
        - users_active_month
        - users_active_half_year
      properties:
        site_id:
          $ref: '#/components/schemas/SiteID'
        users:
          type: integer
          format: int64
        posts:
          type: integer
          format: int64
        comments:
          type: integer
          format: int64
        communities:
          type: integer
          format: int64
        users_active_day:
          type: integer
          format: int64
          description: The number of users with any activity in the last day.
        users_active_week:
          type: integer
          format: int64
          description: The number of users with any activity in the last week.
        users_active_month:
          type: integer
          format: int64
          description: The number of users with any activity in the last month.
        users_active_half_year:
          type: integer
          format: int64
          description: The number of users with any activity in the last half year.

    MyUserInfo:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      required:
        - local_user_view
        - follows
        - moderates
        - community_blocks
        - person_blocks
        - discussion_languages
      properties:
        local_user_view:
          $ref: '#/components/schemas/LocalUserView'
        follows:
          type: array
          items:
            $ref: '#/components/schemas/CommunityFollowerView'
        moderates:
          type: array
          items:
            $ref: '#/components/schemas/CommunityModeratorView'
        community_blocks:
          type: array
          items:
            $ref: '#/components/schemas/CommunityBlockView'
        person_blocks:
          type: array
          items:
            $ref: '#/components/schemas/PersonBlockView'
        discussion_languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageID'

    LocalUserView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      required:
        - local_user
        - person
        - counts
      properties:
        local_user:
          $ref: '#/components/schemas/LocalUser'
      person:
        local_user:
          $ref: '#/components/schemas/Person'
      counts:
        local_user:
          $ref: '#/components/schemas/PersonAggregates'

    LocalUser:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/local_user.rs
      required:
        - id
        - person_id
        - show_nsfw
        - theme
        - default_sort_type
        - default_listing_type
        - interface_language
        - show_avatars
        - send_notifications_to_email
        - show_scores
        - show_bot_accounts
        - show_read_posts
        - email_verified
        - accepted_application
        - open_links_in_new_tab
        - blur_nsfw
        - auto_expand
        - infinite_scroll_enabled
        - admin
        - post_listing_mode
        - totp_2fa_enabled
        - enable_keyboard_navigation
        - enable_animated_images
        - collapse_bot_comments
      properties:
        id:
          $ref: '#/components/schemas/LocalUserID'
        person_id:
          description: The person_id for the local user.
          $ref: '#/components/schemas/PersonID'
        email:
          type: string
          format: email
          description: User's email address.
        show_nsfw:
          type: boolean
          description: Whether to show NSFW content.
        theme:
          type: string
          description: User's theme. e.g. "browser".
        default_sort_type:
          $ref: '#/components/schemas/SortType'
          description: The default sort type for the user.
        default_listing_type:
          $ref: '#/components/schemas/ListingType'
          description: The default listing type.
        interface_language:
          type: string
          description: The language of the Lemmy interface.
        show_avatars:
          type: boolean
          description: Whether to show avatars.
        send_notifications_to_email:
          type: boolean
          description: Whether to send notifications to users email address.
        show_scores:
          type: boolean
          description: Whether to show comment / post scores.
        show_bot_accounts:
          type: boolean
          description: Whether to show bot accounts.
        show_read_posts:
          type: boolean
          description: Whether to show read posts.
        email_verified:
          type: boolean
          description: Whether their email has been verified.
        accepted_application:
          type: boolean
          description: Whether their registration application has been accepted.
        open_links_in_new_tab:
          type: boolean
          description: Open links in a new tab.
        blur_nsfw:
          type: boolean
        auto_expand:
          type: boolean
        infinite_scroll_enabled:
          type: boolean
          description: Whether infinite scroll is enabled.
        admin:
          type: boolean
          description: Whether the person is an admin.
        post_listing_mode:
          $ref: '#/components/schemas/PostListingMode'
        totp_2fa_enabled:
          type: boolean
        enable_keyboard_navigation:
          type: boolean
          description: Whether to allow keyboard navigation (for browsing and interacting with posts and comments).
        enable_animated_images:
          type: boolean
          description: Whether user avatars and inline images in the UI that are gifs should be allowed to play or should be paused
        collapse_bot_comments:
          type: boolean
          description: Whether to auto-collapse bot comments.

    Tagline:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/tagline.rs
      description: A tagline, shown at the top of your site.
      required:
        - id
        - local_site_id
        - content
        - published
      properties:
        id:
          type: integer
          format: int32
        local_site_id:
          $ref: '#/components/schemas/LocalSiteID'
        content:
          type: string
        published:
          type: string
          format: date-time
          description: The date this tagline was published.
        updated:
          type: string
          format: date-time
          description: The date this tagline was last updated.

    CustomEmojiView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      description: A custom emoji view.
      required:
        - custom_emoji
        - keywords
      properties:
        custom_emoji:
          $ref: '#/components/schemas/CustomEmoji'
        keywords:
          type: array
          items:
            $ref: '#/components/schemas/CustomEmojiKeyword'

    CustomEmoji:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/custom_emoji.rs
      description: A custom emoji.
      required:
        - id
        - local_site_id
        - shortcode
        - image_url
        - alt_text
        - category
        - published
      properties:
        id:
          $ref: '#/components/schemas/CustomEmojiID'
        local_site_id:
          $ref: '#/components/schemas/LocalSiteID'
        shortcode:
          type: string
        image_url:
          type: string
          format: uri
        alt_text:
          type: string
        category:
          type: string
        published:
          type: string
          format: date-time
          description: The date this emoji was published.
        updated:
          type: string
          format: date-time
          description: The date this emoji was last updated.

    CustomEmojiKeyword:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/custom_emoji_keyword.rs
      description: A custom keyword for an emoji.
      required:
        - custom_emoji_id
        - keyword
      properties:
        custom_emoji_id:
          $ref: '#/components/schemas/CustomEmojiID'
        keyword:
          type: string

    CommunityFollowerView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_actor/src/structs.rs
      description: A community follower.
      required:
        - community
        - follower
      properties:
        community:
          $ref: '#/components/schemas/Community'
        follower:
          $ref: '#/components/schemas/Person'

    CommunityBlockView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_actor/src/structs.rs
      description: A community block.
      required:
        - person
        - community
      properties:
        person:
          $ref: '#/components/schemas/Person'
        community:
          $ref: '#/components/schemas/Community'

    PersonBlockView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_actor/src/structs.rs
      description: A person block.
      required:
        - person
        - target
      properties:
        person:
          $ref: '#/components/schemas/Person'
        target:
          $ref: '#/components/schemas/Person'

    ResolveObjectResponse:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      description: The response of an apub object fetch.
      properties:
        comment:
          $ref: '#/components/schemas/CommentView'
        post:
          $ref: '#/components/schemas/PostView'
        community:
          $ref: '#/components/schemas/CommunityView'
        person:
          $ref: '#/components/schemas/PersonView'

    CreateSite:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      summary: Creates a site
      description: Should be done after first running Lemmy.
      required:
        - name
      properties:
        name:
          type: string
        sidebar:
          type: string
        description:
          type: string
          description: A shorter, one line description of your site.
        icon:
          type: string
          description: A url for your site's icon.
        banner:
          type: string
          description: A url for your site's banner.
        enable_downvotes:
          type: boolean
          description: Whether to enable downvotes
        enable_nsfw:
          type: boolean
          description: Whether to enable NSFW.
        community_creation_admin_only:
          type: boolean
          description: Limits community creation to admins only.
        require_email_verification:
          type: boolean
          description: Whether to require email verification
        application_question:
          type: string
          description: Your application question form. This is in markdown, and can be many questions.
        private_instance:
          type: boolean
          description: Whether your instance is public, or private
        default_theme:
          type: string
          description: The default theme. Usually "browser"
        default_post_listing_type:
          $ref: '#/components/schemas/ListingType'
        legal_information:
          type: string
          description: An optional page of legal information
        application_email_admins:
          type: boolean
          description: Whether to email admins when receiving a new application.
        hide_modlog_mod_names:
          type: boolean
          description: Whether to hide moderator names from the modlog.
        discussion_languages:
          type: array
          description: A list of allowed discussion languages.
          items:
            $ref: '#/components/schemas/LanguageID'
        slur_filter_regex:
          type: string
          description: A regex string of items to filter.
        actor_name_max_length:
          type: integer
          format: int32
          description: The max length of actor names.
        rate_limit_message:
          type: integer
          format: int32
          description: The number of messages allowed in a given time frame
        rate_limit_message_per_second:
          type: integer
          format: int32
          description: The number of messages allowed in a given time frame
        rate_limit_post:
          type: integer
          format: int32
          description: The number of posts allowed in a given time frame.
        rate_limit_post_per_second:
          type: integer
          format: int32
          description: The number of posts allowed in a given time frame.
        rate_limit_register:
          type: integer
          format: int32
          description: The number of registrations allowed in a given time frame.
        rate_limit_register_per_second:
          type: integer
          format: int32
          description: The number of registrations allowed in a given time frame.
        rate_limit_image:
          type: integer
          format: int32
          description: The number of image uploads allowed in a given time frame.
        rate_limit_image_per_second:
          type: integer
          format: int32
          description: The number of image uploads allowed in a given time frame.
        rate_limit_comment:
          type: integer
          format: int32
          description: The number of comments allowed in a given time frame.
        rate_limit_comment_per_second:
          type: integer
          format: int32
          description: The number of comments allowed in a given time frame.
        rate_limit_search:
          type: integer
          format: int32
          description: The number of searches allowed in a given time frame.
        rate_limit_search_per_second:
          type: integer
          format: int32
          description: The number of searches allowed in a given time frame.
        federation_enabled:
          type: boolean
          description: Whether to enable federation.
        federation_debug:
          type: boolean
          description: Enables federation debugging.
        captcha_enabled:
          type: boolean
          description: Whether to enable captchas for signups.
        captcha_difficulty:
          type: string
          description: The captcha difficulty. Can be easy, medium, or hard
        allowed_instances:
          type: array
          description: A list of allowed instances. If none are set, federation is open.
          items:
            type: string
        blocked_instances:
          type: array
          description: A list of blocked instances.
          items:
            type: string
        taglines:
          type: array
          description: A list of taglines shown at the top of the front page.
          items:
            type: string
        registration_mode:
          $ref: '#/components/schemas/RegistrationMode'

    EditSite:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      summary: Edits a site
      properties:
        name:
          type: string
        sidebar:
          type: string
        description:
          type: string
          description: A shorter, one line description of your site.
        icon:
          type: string
          description: A url for your site's icon.
        banner:
          type: string
          description: A url for your site's banner.
        enable_downvotes:
          type: boolean
          description: Whether to enable downvotes.
        enable_nsfw:
          type: boolean
          description: Whether to enable NSFW.
        community_creation_admin_only:
          type: boolean
          description: Limits community creation to admins only.
        require_email_verification:
          type: boolean
          description: Whether to require email verification
        application_question:
          type: string
          description: Your application question form. This is in markdown, and can be many questions.
        private_instance:
          type: boolean
          description: Whether your instance is public, or private
        default_theme:
          type: string
          description: The default theme. Usually "browser"
        default_post_listing_type:
          $ref: '#/components/schemas/ListingType'
        legal_information:
          type: string
          description: An optional page of legal information
        application_email_admins:
          type: boolean
          description: Whether to email admins when receiving a new application.
        hide_modlog_mod_names:
          type: boolean
          description: Whether to hide moderator names from the modlog.
        discussion_languages:
          type: array
          description: A list of allowed discussion languages.
          items:
            $ref: '#/components/schemas/LanguageID'
        slur_filter_regex:
          type: string
          description: A regex string of items to filter.
        actor_name_max_length:
          type: integer
          format: int32
          description: The max length of actor names.
        rate_limit_message:
          type: integer
          format: int32
          description: The number of messages allowed in a given time frame
        rate_limit_message_per_second:
          type: integer
          format: int32
          description: The number of messages allowed in a given time frame
        rate_limit_post:
          type: integer
          format: int32
          description: The number of posts allowed in a given time frame.
        rate_limit_post_per_second:
          type: integer
          format: int32
          description: The number of posts allowed in a given time frame.
        rate_limit_register:
          type: integer
          format: int32
          description: The number of registrations allowed in a given time frame.
        rate_limit_register_per_second:
          type: integer
          format: int32
          description: The number of registrations allowed in a given time frame.
        rate_limit_image:
          type: integer
          format: int32
          description: The number of image uploads allowed in a given time frame.
        rate_limit_image_per_second:
          type: integer
          format: int32
          description: The number of image uploads allowed in a given time frame.
        rate_limit_comment:
          type: integer
          format: int32
          description: The number of comments allowed in a given time frame.
        rate_limit_comment_per_second:
          type: integer
          format: int32
          description: The number of comments allowed in a given time frame.
        rate_limit_search:
          type: integer
          format: int32
          description: The number of searches allowed in a given time frame.
        rate_limit_search_per_second:
          type: integer
          format: int32
          description: The number of searches allowed in a given time frame.
        federation_enabled:
          type: boolean
          description: Whether to enable federation.
        federation_debug:
          type: boolean
          description: Enables federation debugging.
        captcha_enabled:
          type: boolean
          description: Whether to enable captchas for signups.
        captcha_difficulty:
          type: string
          description: The captcha difficulty. Can be easy, medium, or hard
        allowed_instances:
          type: array
          description: A list of allowed instances. If none are set, federation is open.
          items:
            type: string
        blocked_instances:
          type: array
          description: A list of blocked instances.
          items:
            type: string
        taglines:
          type: array
          description: A list of taglines shown at the top of the front page.
          items:
            type: string
        registration_mode:
          $ref: '#/components/schemas/RegistrationMode'
        reports_email_admins:
          type: boolean
          description: Whether to email admins for new reports.

    SiteResponse:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      description: The response for a site.
      required:
        - site_view
        - taglines
      properties:
        site_view:
          $ref: '#/components/schemas/SiteView'
        taglines:
          type: array
          items:
            $ref: '#/components/schemas/Tagline'

    GenerateTotpSecretResponse:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      required:
        - totp_secret_url
      properties:
        totp_secret_url:
          type: string

    LoginToken:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/login_token.rs
      required:
        - user_id
        - published
      properties:
        user_id:
          $ref: '#/components/schemas/LocalUserID'
        published:
          type: string
          format: date-time
          description: Time of login.
        ip:
          type: string
          description: |
            IP address where login was made from, allows invalidating logins by IP address.
            Could be stored in truncated format, or store derived information for better privacy.
        user_agent:
          type: string

    UpdateTotp:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/person.rs
      required:
        - totp_token
        - enabled
      properties:
        totp_token:
          type: string
        enabled:
          type: boolean

    UpdateTotpResponse:
      type: object
      required:
        - enabled
      properties:
        enabled:
          type: boolean

    GetModlogResponse:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      required:
        - removed_posts
        - locked_posts
        - featured_posts
        - removed_comments
        - removed_communities
        - banned_from_community
        - banned
        - added_to_community
        - transferred_to_community
        - added
        - admin_purged_persons
        - admin_purged_communities
        - admin_purged_posts
        - admin_purged_comments
        - hidden_communities
      properties:
        removed_posts:
          type: array
          items:
            $ref: '#/components/schemas/ModRemovePostView'
        locked_posts:
          type: array
          items:
            $ref: '#/components/schemas/ModLockPostView'
        featured_posts:
          type: array
          items:
            $ref: '#/components/schemas/ModFeaturePostView'
        removed_comments:
          type: array
          items:
            $ref: '#/components/schemas/ModRemoveCommentView'
        removed_communities:
          type: array
          items:
            $ref: '#/components/schemas/ModRemoveCommunityView'
        banned_from_community:
          type: array
          items:
            $ref: '#/components/schemas/ModBanFromCommunityView'
        banned:
          type: array
          items:
            $ref: '#/components/schemas/ModBanView'
        added_to_community:
          type: array
          items:
            $ref: '#/components/schemas/ModAddCommunityView'
        transferred_to_community:
          type: array
          items:
            $ref: '#/components/schemas/ModTransferCommunityView'
        added:
          type: array
          items:
            $ref: '#/components/schemas/ModAddView'
        admin_purged_persons:
          type: array
          items:
            $ref: '#/components/schemas/AdminPurgePersonView'
        admin_purged_communities:
          type: array
          items:
            $ref: '#/components/schemas/AdminPurgeCommunityView'
        admin_purged_posts:
          type: array
          items:
            $ref: '#/components/schemas/AdminPurgePostView'
        admin_purged_comments:
          type: array
          items:
            $ref: '#/components/schemas/AdminPurgeCommentView'
        hidden_communities:
          type: array
          items:
            $ref: '#/components/schemas/ModHideCommunityView'

    ModRemovePostView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      description: When a moderator removes a post.
      required:
        - mod_remove_post
        - post
        - community
      properties:
        mod_remove_post:
          $ref: '#/components/schemas/ModRemovePost'
        moderator:
          $ref: '#/components/schemas/Person'
        post:
          $ref: '#/components/schemas/Post'
        community:
          $ref: '#/components/schemas/Community'

    ModRemovePost:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      description: When a moderator removes a post.
      required:
        - id
        - mod_person_id
        - post_id
        - removed
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        post_id:
          $ref: '#/components/schemas/PostID'
        reason:
          type: string
        removed:
          type: boolean
        when_:
          type: string
          format: date-time

    ModLockPostView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      description: When a moderator locks a post (prevents new comments being made).
      required:
        - mod_lock_post
        - post
        - community
      properties:
        mod_lock_post:
          $ref: '#/components/schemas/ModLockPost'
        moderator:
          $ref: '#/components/schemas/Person'
        post:
          $ref: '#/components/schemas/Post'
        community:
          $ref: '#/components/schemas/Community'

    ModLockPost:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      description: When a moderator locks a post (prevents new comments being made).
      required:
        - id
        - mod_person_id
        - post_id
        - locked
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        post_id:
          $ref: '#/components/schemas/PostID'
        locked:
          type: boolean
        when_:
          type: string
          format: date-time

    ModFeaturePostView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      description: When a moderator locks a post (prevents new comments being made).
      required:
        - mod_feature_post
        - post
        - community
      properties:
        mod_feature_post:
          $ref: '#/components/schemas/ModFeaturePost'
        moderator:
          $ref: '#/components/schemas/Person'
        post:
          $ref: '#/components/schemas/Post'
        community:
          $ref: '#/components/schemas/Community'

    ModFeaturePost:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      description: When a moderator locks a post (prevents new comments being made).
      required:
        - id
        - mod_person_id
        - post_id
        - featured
        - when_
        - is_featured_community
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        post_id:
          $ref: '#/components/schemas/PostID'
        featured:
          type: boolean
        when_:
          type: string
          format: date-time
        is_featured_community:
          type: boolean

    ModRemoveCommentView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      description: When a moderator removes a comment.
      required:
        - mod_remove_comment
        - comment
        - commenter
        - post
        - community
      properties:
        mod_remove_comment:
          $ref: '#/components/schemas/ModRemoveComment'
        moderator:
          $ref: '#/components/schemas/Person'
        comment:
          $ref: '#/components/schemas/Comment'
        commenter:
          $ref: '#/components/schemas/Person'
        post:
          $ref: '#/components/schemas/Post'
        community:
          $ref: '#/components/schemas/Community'

    ModRemoveComment:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      description: When a moderator removes a comment.
      required:
        - id
        - mod_person_id
        - comment_id
        - removed
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        comment_id:
          $ref: '#/components/schemas/CommentID'
        reason:
          type: string
        removed:
          type: boolean
        when_:
          type: string
          format: date-time

    ModRemoveCommunityView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      description: When a moderator removes a community.
      required:
        - mod_remove_community
        - community
      properties:
        mod_remove_community:
          $ref: '#/components/schemas/ModRemoveCommunity'
        moderator:
          $ref: '#/components/schemas/Person'
        community:
          $ref: '#/components/schemas/Community'

    ModRemoveCommunity:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      description: When a moderator removes a community.
      required:
        - id
        - mod_person_id
        - community_id
        - removed
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        community_id:
          $ref: '#/components/schemas/CommunityID'
        reason:
          type: string
        removed:
          type: boolean
        when_:
          type: string
          format: date-time

    ModBanFromCommunityView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      description: When someone is banned from a community.
      required:
        - mod_ban_from_community
        - community
        - banned_person
      properties:
        mod_ban_from_community:
          $ref: '#/components/schemas/ModBanFromCommunity'
        moderator:
          $ref: '#/components/schemas/Person'
        community:
          $ref: '#/components/schemas/Community'
        banned_person:
          $ref: '#/components/schemas/Person'

    ModBanFromCommunity:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      description: When someone is banned from a community.
      required:
        - id
        - mod_person_id
        - other_person_id
        - community_id
        - banned
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        other_person_id:
          $ref: '#/components/schemas/PersonID'
        community_id:
          $ref: '#/components/schemas/CommunityID'
        reason:
          type: string
        banned:
          type: boolean
        expires:
          type: string
          format: date-time
        when_:
          type: string
          format: date-time

    ModBanView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      description: When someone is banned from the site.
      required:
        - mod_ban
        - banned_person
      properties:
        mod_ban:
          $ref: '#/components/schemas/ModBan'
        moderator:
          $ref: '#/components/schemas/Person'
        banned_person:
          $ref: '#/components/schemas/Person'

    ModBan:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      description: When someone is banned from the site.
      required:
        - id
        - mod_person_id
        - other_person_id
        - community_id
        - banned
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        other_person_id:
          $ref: '#/components/schemas/PersonID'
        community_id:
          $ref: '#/components/schemas/CommunityID'
        reason:
          type: string
        banned:
          type: boolean
        expires:
          type: string
          format: date-time
        when_:
          type: string
          format: date-time

    ModAddCommunityView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      description: When someone is added as a community moderator.
      required:
        - mod_add_community
        - community
        - modded_person
      properties:
        mod_add_community:
          $ref: '#/components/schemas/ModAddCommunity'
        moderator:
          $ref: '#/components/schemas/Person'
        community:
          $ref: '#/components/schemas/Community'
        modded_person:
          $ref: '#/components/schemas/Person'

    ModAddCommunity:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      description: When someone is added as a community moderator.
      required:
        - id
        - mod_person_id
        - other_person_id
        - community_id
        - removed
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        other_person_id:
          $ref: '#/components/schemas/PersonID'
        community_id:
          $ref: '#/components/schemas/CommunityID'
        reason:
          type: string
        removed:
          type: boolean
        when_:
          type: string
          format: date-time

    ModTransferCommunityView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      description: When a moderator transfers a community to a new owner.
      required:
        - mod_transfer_community
        - community
        - modded_person
      properties:
        mod_transfer_community:
          $ref: '#/components/schemas/ModTransferCommunity'
        moderator:
          $ref: '#/components/schemas/Person'
        community:
          $ref: '#/components/schemas/Community'
        modded_person:
          $ref: '#/components/schemas/Person'

    ModTransferCommunity:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      description: When a moderator transfers a community to a new owner.
      required:
        - id
        - mod_person_id
        - other_person_id
        - community_id
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        other_person_id:
          $ref: '#/components/schemas/PersonID'
        community_id:
          $ref: '#/components/schemas/CommunityID'
        when_:
          type: string
          format: date-time

    ModAddView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      description: When someone is added as a site moderator.
      required:
        - mod_add
        - modded_person
      properties:
        mod_add:
          $ref: '#/components/schemas/ModAdd'
        moderator:
          $ref: '#/components/schemas/Person'
        modded_person:
          $ref: '#/components/schemas/Person'

    ModAdd:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      description: When someone is added as a site moderator.
      required:
        - id
        - mod_person_id
        - other_person_id
        - when_
      properties:
        id:
          type: integer
          format: int32
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        other_person_id:
          $ref: '#/components/schemas/PersonID'
        removed:
          type: boolean
        when_:
          type: string
          format: date-time

    AdminPurgePersonView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      description: When an admin purges a person.
      required:
        - admin_purge_person
      properties:
        admin_purge_person:
          $ref: '#/components/schemas/AdminPurgePerson'
        admin:
          $ref: '#/components/schemas/Person'

    AdminPurgePerson:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      description: When an admin purges a person.
      required:
        - id
        - admin_person_id
        - when_
      properties:
        id:
          type: integer
          format: int32
        admin_person_id:
          $ref: '#/components/schemas/PersonID'
        reason:
          type: string
        when_:
          type: string
          format: date-time

    AdminPurgeCommunityView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      description: When an admin purges a community.
      required:
        - admin_purge_community
      properties:
        admin_purge_person:
          $ref: '#/components/schemas/AdminPurgeCommunity'
        admin:
          $ref: '#/components/schemas/Person'

    AdminPurgeCommunity:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      description: When an admin purges a community.
      required:
        - id
        - admin_person_id
        - when_
      properties:
        id:
          type: integer
          format: int32
        admin_person_id:
          $ref: '#/components/schemas/PersonID'
        reason:
          type: string
        when_:
          type: string
          format: date-time

    AdminPurgePostView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      description: When an admin purges a post.
      required:
        - admin_purge_post
        - community
      properties:
        admin_purge_post:
          $ref: '#/components/schemas/AdminPurgePost'
        admin:
          $ref: '#/components/schemas/Person'
        community:
          $ref: '#/components/schemas/Community'

    AdminPurgePost:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      description: When an admin purges a post.
      required:
        - id
        - admin_person_id
        - community_id
        - when_
      properties:
        id:
          type: integer
          format: int32
        admin_person_id:
          $ref: '#/components/schemas/PersonID'
        community_id:
          $ref: '#/components/schemas/CommunityID'
        reason:
          type: string
        when_:
          type: string
          format: date-time

    AdminPurgeCommentView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      description: When an admin purges a comment.
      required:
        - admin_purge_comment
        - post
      properties:
        admin_purge_comment:
          $ref: '#/components/schemas/AdminPurgeComment'
        admin:
          $ref: '#/components/schemas/Person'
        post:
          $ref: '#/components/schemas/Post'

    AdminPurgeComment:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      description: When an admin purges a comment.
      required:
        - id
        - admin_person_id
        - post_id
        - when_
      properties:
        id:
          type: integer
          format: int32
        admin_person_id:
          $ref: '#/components/schemas/PersonID'
        post_id:
          $ref: '#/components/schemas/PostID'
        reason:
          type: string
        when_:
          type: string
          format: date-time

    ModHideCommunityView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views_moderator/src/structs.rs
      description: When a community is hidden from public view.
      required:
        - mod_hide_community
        - community
      properties:
        mod_hide_community:
          $ref: '#/components/schemas/ModHideCommunity'
        admin:
          $ref: '#/components/schemas/Person'
        community:
          $ref: '#/components/schemas/Community'

    ModHideCommunity:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/moderator.rs
      description: When a community is hidden from public view.
      required:
        - id
        - community_id
        - mod_person_id
        - when_
        - hidden
      properties:
        id:
          type: integer
          format: int32
        community_id:
          $ref: '#/components/schemas/CommunityID'
        mod_person_id:
          $ref: '#/components/schemas/PersonID'
        reason:
          type: string
        when_:
          type: string
          format: date-time
        hidden:
          type: boolean

    SearchResponse:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/site.rs
      description: The search response, containing lists of the return type possibilities.
      required:
        - type_
        - comments
        - posts
        - users
      properties:
        type_:
          $ref: '#/components/schemas/SearchType'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentView'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostView'
        communities:
          type: array
          items:
            $ref: '#/components/schemas/CommunityView'
        users:
          type: array
          items:
            $ref: '#/components/schemas/PersonView'

    CreateCommunity:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      description: Create a community.
      required:
        - name
        - title
      properties:
        name:
          type: string
          description: The unique name
        title:
          type: string
          description: A longer title.
        description:
          type: string
          description: A longer sidebar, or description of your community, in markdown.
        icon:
          type: string
          format: uri
          description: An icon URL.
        banner:
          type: string
          format: uri
          description: A banner URL.
        nsfw:
          type: boolean
          description: Whether its an NSFW community.
        posting_restricted_to_mods:
          type: boolean
          description: Whether to restrict posting only to moderators.
        discussion_languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageID'

    CommunityResponse:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      description: A simple community response.
      required:
        - community_view
        - discussion_languages
      properties:
        community_view:
          $ref: '#/components/schemas/CommunityView'
        discussion_languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageID'

    GetCommunityResponse:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      description: The community response.
      required:
        - community_view
        - moderators
        - discussion_languages
      properties:
        community_view:
          $ref: '#/components/schemas/CommunityView'
        site:
          $ref: '#/components/schemas/Site'
        discussion_languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageID'

    EditCommunity:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      description: Edit a community.
      required:
        - community_id
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        title:
          type: string
          description: A longer title.
        description:
          type: string
          description: A longer sidebar, or description of your community, in markdown.
        icon:
          type: string
          format: uri
          description: An icon URL.
        banner:
          type: string
          format: uri
          description: A banner URL.
        nsfw:
          type: boolean
          description: Whether its an NSFW community.
        posting_restricted_to_mods:
          type: boolean
          description: Whether to restrict posting only to moderators.
        discussion_languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageID'

    ListCommunitiesResponse:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      description: The response for listing communities.
      required:
        - communities
      properties:
        communities:
          type: array
          items:
            $ref: '#/components/schemas/CommunityView'

    FollowCommunity:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      description: Follow / subscribe to a community.
      required:
        - community_id
        - follow
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        follow:
          type: boolean

    BlockCommunity:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      description: Block a community.
      required:
        - community_id
        - block
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        block:
          type: boolean

    BlockCommunityResponse:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      description: The block community response.
      required:
        - community_view
        - blocked
      properties:
        community_view:
          $ref: '#/components/schemas/CommunityView'
        blocked:
          type: boolean

    DeleteCommunity:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      description: Delete your own community.
      required:
        - community_id
        - deleted
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        deleted:
          type: boolean

    HideCommunity:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      description: Hide a community from the main view.
      required:
        - community_id
        - hidden
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        hidden:
          type: boolean
        reason:
          type: string

    RemoveCommunity:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      description: Remove a community (only doable by moderators).
      required:
        - community_id
        - removed
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        removed:
          type: boolean
        reason:
          type: string

    TransferCommunity:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      description: Transfer a community to a new owner.
      required:
        - community_id
        - person_id
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        person_id:
          $ref: '#/components/schemas/PersonID'

    BanFromCommunity:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      description: Ban a user from a community.
      required:
        - community_id
        - person_id
        - ban
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        person_id:
          $ref: '#/components/schemas/PersonID'
        ban:
          type: boolean
        remove_data:
          type: boolean
        reason:
          type: string
        expires:
          type: integer
          format: int64

    BanFromCommunityResponse:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      description: The response for banning a user from a community.
      required:
        - person_view
        - banned
      properties:
        person_view:
          $ref: '#/components/schemas/PersonView'
        banned:
          type: boolean

    AddModToCommunity:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      description: Add a moderator to a community.
      required:
        - community_id
        - person_id
        - added
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityID'
        person_id:
          $ref: '#/components/schemas/PersonID'
        added:
          type: boolean

    AddModToCommunityResponse:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/community.rs
      description: The response of adding a moderator to a community.
      required:
        - moderators
      properties:
        moderators:
          type: array
          items:
            $ref: '#/components/schemas/CommunityModeratorView'

    CreatePost:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      description: Create a post.
      required:
        - name
        - community_id
      properties:
        name:
          type: string
        community_id:
          $ref: '#/components/schemas/CommunityID'
        url:
          type: string
          format: uri
        body:
          type: string
          description: An optional body for the post in markdown
        honeypot:
          type: string
        nsfw:
          type: boolean
        language_id:
          $ref: '#/components/schemas/LanguageID'

    PostResponse:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      required:
        - post_view
      properties:
        post_view:
          $ref: '#/components/schemas/PostView'

    EditPost:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      description: Edit a post.
      required:
        - post_id
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        name:
          type: string
        url:
          type: string
          format: uri
        body:
          type: string
          description: An optional body for the post in markdown
        nsfw:
          type: boolean
        language_id:
          $ref: '#/components/schemas/LanguageID'

    DeletePost:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      description: Delete a post.
      required:
        - post_id
        - deleted
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        deleted:
          type: boolean

    RemovePost:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      description: Remove a post (only doable by mods).
      required:
        - post_id
        - removed
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        removed:
          type: boolean
        reason:
          type: string

    MarkPostAsRead:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      description: Mark a post as read.
      required:
        - read
      properties:
        post_id:
          deprecated: true
          $ref: '#/components/schemas/PostID'
        post_ids:
          type: array
          items:
            $ref: '#/components/schemas/PostID'
        read:
          type: boolean

    LockPost:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      description: Lock a post (prevent new comments).
      required:
        - post_id
        - locked
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        locked:
          type: boolean

    FeaturePost:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      description: Feature a post (stickies / pins to the top).
      required:
        - post_id
        - featured
        - feature_type
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        featured:
          type: boolean
        feature_type:
          $ref: '#/components/schemas/PostFeatureType'

    CreatePostLike:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      description: Like a post.
      required:
        - post_id
        - score
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        score:
          $ref: '#/components/schemas/MyVote'

    SavePost:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      description: Save / bookmark a post.
      required:
        - post_id
        - save
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        save:
          type: boolean

    CreatePostReport:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      description: Create a post report.
      required:
        - post_id
        - reason
      properties:
        post_id:
          $ref: '#/components/schemas/PostID'
        reason:
          type: string

    PostReportResponse:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      description: The post report response.
      required:
        - post_report_view
      properties:
        post_report_view:
          $ref: '#/components/schemas/PostReportView'

    PostReportView:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_views/src/structs.rs
      description: A post report view.
      required:
        - post_report
        - post
        - community
        - creator
        - post_creator
        - creator_banned_from_community
        - counts
      properties:
        post_report:
          $ref: '#/components/schemas/PostReport'
        post:
          $ref: '#/components/schemas/Post'
        community:
          $ref: '#/components/schemas/Community'
        creator:
          $ref: '#/components/schemas/Person'
        post_creator:
          $ref: '#/components/schemas/Person'
        creator_banned_from_community:
          type: boolean
        my_vote:
          $ref: '#/components/schemas/MyVote'
        counts:
          $ref: '#/components/schemas/PostAggregates'
        resolver:
          $ref: '#/components/schemas/Person'

    PostReport:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/db_schema/src/source/post_report.rs
      description: A post report.
      required:
        - id
        - creator_id
        - post_id
        - original_post_name
        - reason
        - resolved
        - published
      properties:
        id:
          $ref: '#/components/schemas/PostReportID'
        creator_id:
          $ref: '#/components/schemas/PersonID'
        post_id:
          $ref: '#/components/schemas/PostID'
        original_post_name:
          type: string
          description: The original post title.
        original_post_url:
          type: string
          format: uri
          description: The original post url.
        original_post_body:
          type: string
          description: The original post body.
        reason:
          type: string
        resolved:
          type: boolean
        resolver_id:
          $ref: '#/components/schemas/PersonID'
        published:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time

    ResolvePostReport:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      description: Resolve a post report (mods only).
      required:
        - report_id
        - resolved
      properties:
        report_id:
          $ref: '#/components/schemas/PostReportID'
        resolved:
          type: boolean

    ListPostReportsResponse:
      type: object
      externalLink: https://github.com/LemmyNet/lemmy/blob/main/crates/api_common/src/post.rs
      description: The post reports response.
      required:
        - post_reports
      properties:
        post_reports:
          type: array
          items:
            $ref: '#/components/schemas/PostReportView'

